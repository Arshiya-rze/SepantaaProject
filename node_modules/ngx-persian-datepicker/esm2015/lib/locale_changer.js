/**
 * @fileoverview added by tsickle
 * Generated from: lib/locale_changer.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { ChangeDetectionStrategy, Component, Inject, Optional, ViewEncapsulation } from '@angular/core';
import { createMissingDateImplError } from './datepicker-errors';
import { DateAdapter, MAT_DATE_FORMATS } from '@angular/material';
/**
 * An internal component used to display a single year in the datepicker.
 * \@docs-private
 * @template D
 */
export class MdLocaleChanger {
    /**
     * @param {?} _dateAdapter
     * @param {?} _dateFormats
     */
    constructor(_dateAdapter, _dateFormats) {
        this._dateAdapter = _dateAdapter;
        this._dateFormats = _dateFormats;
        if (!this._dateAdapter) {
            throw createMissingDateImplError('DateAdapter');
        }
        if (!this._dateFormats) {
            throw createMissingDateImplError('MD_DATE_FORMATS');
        }
        this.any = (/** @type {?} */ (_dateAdapter));
        this.mustDestroy = ((/** @type {?} */ (_dateFormats)))._lastChanges.subscribe((/**
         * @param {?} v
         * @return {?}
         */
        (v) => {
            this.lang = v;
        }));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.mustDestroy.unsubscribe();
    }
    // change locale function()
    /**
     * @return {?}
     */
    _changeLocale() {
        this.any.changeLocale();
    }
}
MdLocaleChanger.decorators = [
    { type: Component, args: [{
                moduleId: module.id,
                selector: 'md-locale-changer',
                template: `
        <mat-button-toggle-group #group="matButtonToggleGroup" (change)="_changeLocale()" [value]="lang">
            <mat-button-toggle value="fa">
                شمسی
            </mat-button-toggle>
            <mat-button-toggle value="en">
                میلادی
            </mat-button-toggle>
        </mat-button-toggle-group>
    `,
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [".mat-button-toggle-group .mat-button-toggle{font-size:11px}.mat-button-toggle-group .mat-button-toggle .mat-button-toggle-label-content{line-height:26px}"]
            }] }
];
/** @nocollapse */
MdLocaleChanger.ctorParameters = () => [
    { type: DateAdapter, decorators: [{ type: Optional }] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DATE_FORMATS,] }] }
];
if (false) {
    /** @type {?} */
    MdLocaleChanger.prototype.any;
    /** @type {?} */
    MdLocaleChanger.prototype.lang;
    /** @type {?} */
    MdLocaleChanger.prototype.mustDestroy;
    /** @type {?} */
    MdLocaleChanger.prototype._dateAdapter;
    /**
     * @type {?}
     * @private
     */
    MdLocaleChanger.prototype._dateFormats;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9jYWxlX2NoYW5nZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtcGVyc2lhbi1kYXRlcGlja2VyLyIsInNvdXJjZXMiOlsibGliL2xvY2FsZV9jaGFuZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQVFBLE9BQU8sRUFDSCx1QkFBdUIsRUFDdkIsU0FBUyxFQUNULE1BQU0sRUFDTixRQUFRLEVBQ1IsaUJBQWlCLEVBQ3BCLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBQywwQkFBMEIsRUFBQyxNQUFNLHFCQUFxQixDQUFDO0FBQy9ELE9BQU8sRUFBQyxXQUFXLEVBQUUsZ0JBQWdCLEVBQUMsTUFBTSxtQkFBbUIsQ0FBQzs7Ozs7O0FBd0JoRSxNQUFNLE9BQU8sZUFBZTs7Ozs7SUFLeEIsWUFBK0IsWUFBNEIsRUFDRCxZQUFpQjtRQUQ1QyxpQkFBWSxHQUFaLFlBQVksQ0FBZ0I7UUFDRCxpQkFBWSxHQUFaLFlBQVksQ0FBSztRQUN2RSxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRTtZQUNwQixNQUFNLDBCQUEwQixDQUFDLGFBQWEsQ0FBQyxDQUFDO1NBQ25EO1FBQ0QsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUU7WUFDcEIsTUFBTSwwQkFBMEIsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1NBQ3ZEO1FBQ0QsSUFBSSxDQUFDLEdBQUcsR0FBRyxtQkFBQSxZQUFZLEVBQU8sQ0FBQztRQUMvQixJQUFJLENBQUMsV0FBVyxHQUFHLENBQUMsbUJBQUEsWUFBWSxFQUFPLENBQUMsQ0FBQyxZQUFZLENBQUMsU0FBUzs7OztRQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUU7WUFDbEUsSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDLENBQUM7UUFDbEIsQ0FBQyxFQUFDLENBQUM7SUFDUCxDQUFDOzs7O0lBRUQsV0FBVztRQUNQLElBQUksQ0FBQyxXQUFXLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDbkMsQ0FBQzs7Ozs7SUFHRCxhQUFhO1FBQ1QsSUFBSSxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUM1QixDQUFDOzs7WUEzQ0osU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSxNQUFNLENBQUMsRUFBRTtnQkFDbkIsUUFBUSxFQUFFLG1CQUFtQjtnQkFDN0IsUUFBUSxFQUFFOzs7Ozs7Ozs7S0FTVDtnQkFFRCxhQUFhLEVBQUUsaUJBQWlCLENBQUMsSUFBSTtnQkFDckMsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07O2FBQ2xEOzs7O1lBdkJPLFdBQVcsdUJBNkJGLFFBQVE7NENBQ1IsUUFBUSxZQUFJLE1BQU0sU0FBQyxnQkFBZ0I7Ozs7SUFMaEQsOEJBQUk7O0lBQ0osK0JBQUs7O0lBQ0wsc0NBQVk7O0lBRUEsdUNBQStDOzs7OztJQUMvQyx1Q0FBK0QiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXHJcbiAqXHJcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXHJcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcclxuICovXHJcblxyXG5pbXBvcnQge1xyXG4gICAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXHJcbiAgICBDb21wb25lbnQsXHJcbiAgICBJbmplY3QsIE9uRGVzdHJveSxcclxuICAgIE9wdGlvbmFsLFxyXG4gICAgVmlld0VuY2Fwc3VsYXRpb25cclxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHtjcmVhdGVNaXNzaW5nRGF0ZUltcGxFcnJvcn0gZnJvbSAnLi9kYXRlcGlja2VyLWVycm9ycyc7XHJcbmltcG9ydCB7RGF0ZUFkYXB0ZXIsIE1BVF9EQVRFX0ZPUk1BVFN9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsJztcclxuXHJcblxyXG4vKipcclxuICogQW4gaW50ZXJuYWwgY29tcG9uZW50IHVzZWQgdG8gZGlzcGxheSBhIHNpbmdsZSB5ZWFyIGluIHRoZSBkYXRlcGlja2VyLlxyXG4gKiBAZG9jcy1wcml2YXRlXHJcbiAqL1xyXG5AQ29tcG9uZW50KHtcclxuICAgIG1vZHVsZUlkOiBtb2R1bGUuaWQsXHJcbiAgICBzZWxlY3RvcjogJ21kLWxvY2FsZS1jaGFuZ2VyJyxcclxuICAgIHRlbXBsYXRlOiBgXHJcbiAgICAgICAgPG1hdC1idXR0b24tdG9nZ2xlLWdyb3VwICNncm91cD1cIm1hdEJ1dHRvblRvZ2dsZUdyb3VwXCIgKGNoYW5nZSk9XCJfY2hhbmdlTG9jYWxlKClcIiBbdmFsdWVdPVwibGFuZ1wiPlxyXG4gICAgICAgICAgICA8bWF0LWJ1dHRvbi10b2dnbGUgdmFsdWU9XCJmYVwiPlxyXG4gICAgICAgICAgICAgICAg2LTZhdiz24xcclxuICAgICAgICAgICAgPC9tYXQtYnV0dG9uLXRvZ2dsZT5cclxuICAgICAgICAgICAgPG1hdC1idXR0b24tdG9nZ2xlIHZhbHVlPVwiZW5cIj5cclxuICAgICAgICAgICAgICAgINmF24zZhNin2K/bjFxyXG4gICAgICAgICAgICA8L21hdC1idXR0b24tdG9nZ2xlPlxyXG4gICAgICAgIDwvbWF0LWJ1dHRvbi10b2dnbGUtZ3JvdXA+XHJcbiAgICBgLFxyXG4gICAgc3R5bGVVcmxzOiBbJ2xvY2FsZS1jaGFuZ2VyLnNjc3MnXSxcclxuICAgIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmUsXHJcbiAgICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcclxufSlcclxuZXhwb3J0IGNsYXNzIE1kTG9jYWxlQ2hhbmdlcjxEPiBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XHJcbiAgICBhbnk7XHJcbiAgICBsYW5nO1xyXG4gICAgbXVzdERlc3Ryb3k7XHJcblxyXG4gICAgY29uc3RydWN0b3IoQE9wdGlvbmFsKCkgcHVibGljIF9kYXRlQWRhcHRlcjogRGF0ZUFkYXB0ZXI8RD4sXHJcbiAgICAgICAgICAgICAgICBAT3B0aW9uYWwoKSBASW5qZWN0KE1BVF9EQVRFX0ZPUk1BVFMpIHByaXZhdGUgX2RhdGVGb3JtYXRzOiBhbnkpIHtcclxuICAgICAgICBpZiAoIXRoaXMuX2RhdGVBZGFwdGVyKSB7XHJcbiAgICAgICAgICAgIHRocm93IGNyZWF0ZU1pc3NpbmdEYXRlSW1wbEVycm9yKCdEYXRlQWRhcHRlcicpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIXRoaXMuX2RhdGVGb3JtYXRzKSB7XHJcbiAgICAgICAgICAgIHRocm93IGNyZWF0ZU1pc3NpbmdEYXRlSW1wbEVycm9yKCdNRF9EQVRFX0ZPUk1BVFMnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5hbnkgPSBfZGF0ZUFkYXB0ZXIgYXMgYW55O1xyXG4gICAgICAgIHRoaXMubXVzdERlc3Ryb3kgPSAoX2RhdGVGb3JtYXRzIGFzIGFueSkuX2xhc3RDaGFuZ2VzLnN1YnNjcmliZSgodikgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmxhbmcgPSB2O1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIG5nT25EZXN0cm95KCkge1xyXG4gICAgICAgIHRoaXMubXVzdERlc3Ryb3kudW5zdWJzY3JpYmUoKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBjaGFuZ2UgbG9jYWxlIGZ1bmN0aW9uKClcclxuICAgIF9jaGFuZ2VMb2NhbGUoKSB7XHJcbiAgICAgICAgdGhpcy5hbnkuY2hhbmdlTG9jYWxlKCk7XHJcbiAgICB9XHJcblxyXG5cclxufVxyXG4iXX0=