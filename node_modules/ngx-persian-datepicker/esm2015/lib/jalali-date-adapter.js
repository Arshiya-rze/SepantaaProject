/**
 * @fileoverview added by tsickle
 * Generated from: lib/jalali-date-adapter.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Inject, Optional } from '@angular/core';
import { DateAdapter } from '@angular/material';
import * as jMoment from 'moment-jalaali';
import { MAT_DATE_LOCALE } from './injectors';
/** @type {?} */
const minmin = jMoment;
export class JalaliMomentDateAdapter extends DateAdapter {
    /**
     * @param {?} matDateLocale
     */
    constructor(matDateLocale) {
        super();
        this.setLocale(matDateLocale || minmin.locale('fa'));
        minmin.loadPersian();
    }
    /**
     * @return {?}
     */
    invalid() {
        return (/** @type {?} */ ('hi'));
    }
    /**
     * @param {?} date
     * @return {?}
     */
    toIso8601(date) {
        return 'hi';
    }
    /**
     * returns year in jalali calendar system.
     * @param {?} date
     * @return {?}
     */
    getYear(date) {
        return this.clone(date).jYear();
    }
    /**
     * returns month in jalali calendar system.
     * @param {?} date
     * @return {?}
     */
    getMonth(date) {
        return this.clone(date).jMonth();
    }
    /**
     * returns day in jalali calendar system.
     * @param {?} date
     * @return {?}
     */
    getDate(date) {
        return this.clone(date).jDate();
    }
    /**
     * returns Day Of Week in jalali calendar system.
     * @param {?} date
     * @return {?}
     */
    getDayOfWeek(date) {
        return this.clone(date).day();
    }
    /**
     * returns Month Names in jalali calendar system.
     * most of the time we use long format. short or narrow format for month names is a little odd.
     * @param {?} style
     * @return {?}
     */
    getMonthNames(style) {
        /** @type {?} */
        const r = [];
        minmin.loadPersian({ dialect: 'persian', usePersianDigits: true });
        /** @type {?} */
        const l = minmin().localeData();
        if (style === 'long' || style === 'short') {
            Object.keys(l).forEach((/**
             * @param {?} key
             * @return {?}
             */
            key => {
                if (key === '_jMonths') {
                    /** @type {?} */
                    const values = l[key];
                    for (let index = 0; index < values.length; index++) {
                        r.push(values[index]);
                    }
                }
            }));
        }
        else {
            Object.keys(l).forEach((/**
             * @param {?} key
             * @return {?}
             */
            key => {
                if (key === '_jMonthsShort') {
                    /** @type {?} */
                    const values = l[key];
                    for (let index = 0; index < values.length; index++) {
                        r.push(values[index]);
                    }
                }
            }));
        }
        return r;
        // switch (style) {
        //     case 'long':
        //         const mlong = (minmin().localeData() as any)._jMonths.slice(0);
        //         console.log(mlong);
        //         return mlong;
        //     case 'short':
        //         const mshort = (minmin().localeData() as any)._jMonthsShort.slice(0);
        //         console.log('mshort: ', mshort);
        //         return mshort;
        //     case 'narrow':
        //         return (minmin().localeData() as any)._jMonthsShort.slice(0);
        // }
    }
    /**
     * borrowed from angular material code.
     * @return {?}
     */
    getDateNames() {
        return this.range(31, (/**
         * @param {?} i
         * @return {?}
         */
        i => String(i + 1)));
    }
    /**
     * returns Day Of Week names in jalali calendar system.
     * @param {?} style
     * @return {?}
     */
    getDayOfWeekNames(style) {
        switch (style) {
            case 'long':
                return minmin().localeData().weekdays().slice(0);
            case 'short':
                return minmin().localeData().weekdaysShort().slice(0);
            case 'narrow':
                return minmin().localeData().weekdaysMin().slice(0);
        }
    }
    /**
     * returns year in jalali calendar system.
     * @param {?} date
     * @return {?}
     */
    getYearName(date) {
        return this.clone(date).jYear().toString();
    }
    /**
     * returns first day of week in jalali calendar system.
     * first day of week is saturday, شنبه
     * @return {?}
     */
    getFirstDayOfWeek() {
        return 6;
    }
    /**
     * returns Number of Days In Month in jalali calendar system.
     * @param {?} date
     * @param {?=} fa
     * @return {?}
     */
    getNumDaysInMonth(date, fa) {
        if (date['_d']) {
            return minmin.jDaysInMonth(this.getYear(date['_d']), this.getMonth(date['_d']));
        }
        return minmin.jDaysInMonth(this.getYear(date), this.getMonth(date));
    }
    /**
     * @param {?} date
     * @return {?}
     */
    clone(date) {
        // return date.clone().locale(this.locale);
        return minmin(date);
    }
    /**
     * @param {?} year
     * @param {?} month
     * @param {?} date
     * @return {?}
     */
    createDate(year, month, date) {
        return minmin().jYear(year).jMonth(month).jDate(date);
    }
    /**
     * @return {?}
     */
    today() {
        return minmin();
    }
    /**
     * @param {?} value
     * @param {?} parseFormat
     * @return {?}
     */
    parse(value, parseFormat) {
        if (value && typeof value === 'string') {
            return minmin(value, parseFormat, this.locale);
        }
        return value ? minmin(value).locale(this.locale) : null;
    }
    /**
     * @param {?} date
     * @param {?} displayFormat
     * @return {?}
     */
    format(date, displayFormat) {
        return this.clone(date).format(displayFormat);
    }
    /**
     * @param {?} date
     * @param {?} years
     * @return {?}
     */
    addCalendarYears(date, years) {
        return this.clone(date).add(years, 'jYear');
    }
    /**
     * @param {?} date
     * @param {?} months
     * @return {?}
     */
    addCalendarMonths(date, months) {
        return this.clone(date).add((/** @type {?} */ (months)), 'jmonth');
    }
    /**
     * @param {?} date
     * @param {?} days
     * @return {?}
     */
    addCalendarDays(date, days) {
        return this.clone(date).add(days, 'day');
    }
    /**
     * @param {?} date
     * @return {?}
     */
    getISODateString(date) {
        return this.clone(date).format('jYYYY-jMM-jDD');
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    isDateInstance(obj) {
        return minmin.isMoment(obj);
    }
    /**
     * @param {?} date
     * @return {?}
     */
    isValid(date) {
        return this.clone(date).isValid();
    }
    /**
     * @template T
     * @param {?} length
     * @param {?} valueFunction
     * @return {?}
     */
    range(length, valueFunction) {
        /** @type {?} */
        const valuesArray = Array(length);
        for (let i = 0; i < length; i++) {
            valuesArray[i] = valueFunction(i);
        }
        return valuesArray;
    }
}
/** @nocollapse */
JalaliMomentDateAdapter.ctorParameters = () => [
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DATE_LOCALE,] }] }
];
//# sourceMappingURL=data:application/json;base64,