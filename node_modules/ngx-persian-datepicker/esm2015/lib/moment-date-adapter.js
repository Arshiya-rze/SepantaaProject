/**
 * @fileoverview added by tsickle
 * Generated from: lib/moment-date-adapter.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Inject, Injectable, LOCALE_ID, Optional } from '@angular/core';
import { DateAdapter } from '@angular/material';
import { JalaliMomentDateAdapter } from './jalali-date-adapter';
import { extendObject } from './object-extend';
import { Subject } from 'rxjs';
import { BehaviorSubject } from 'rxjs';
// TODO(mmalerba): Remove when we no longer support safari 9.
/**
 * Whether the browser supports the Intl API.
 * @type {?}
 */
const SUPPORTS_INTL_API = typeof Intl != 'undefined';
/**
 * The default month names to use if Intl API is not available.
 * @type {?}
 */
const DEFAULT_MONTH_NAMES = {
    'long': [
        'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',
        'October', 'November', 'December'
    ],
    'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
    'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']
};
const ɵ0 = /**
 * @param {?} i
 * @return {?}
 */
i => String(i + 1);
/**
 * The default date names to use if Intl API is not available.
 * @type {?}
 */
const DEFAULT_DATE_NAMES = range(31, (ɵ0));
/**
 * The default day of the week names to use if Intl API is not available.
 * @type {?}
 */
const DEFAULT_DAY_OF_WEEK_NAMES = {
    'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
    'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
    'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']
};
/**
 * Creates an array and fills it with values.
 * @template T
 * @param {?} length
 * @param {?} valueFunction
 * @return {?}
 */
function range(length, valueFunction) {
    /** @type {?} */
    const valuesArray = Array(length);
    for (let i = 0; i < length; i++) {
        valuesArray[i] = valueFunction(i);
    }
    return valuesArray;
}
/**
 * Adapts the native JS Date for use with cdk-based components that work with dates.
 */
export class NativeDateAdapter extends DateAdapter {
    /**
     * @param {?} localeId
     */
    constructor(localeId) {
        super();
        this.lang = 'fa';
        this.langSubject = new Subject();
        this.JDateAdapter = new JalaliMomentDateAdapter('fa');
        /**
         * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.
         * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off
         * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`
         * will produce `'8/13/1800'`.
         */
        this.useUtcForDisplay = true;
        super.setLocale(localeId);
    }
    /**
     * @return {?}
     */
    invalid() {
        return new Date();
    }
    /**
     * @param {?} date
     * @return {?}
     */
    toIso8601(date) {
        return 'hi';
    }
    /**
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    sameDate(a, b) {
        return false;
    }
    /**
     * @param {?} v
     * @return {?}
     */
    setLocale(v) {
        super.setLocale(v);
        if (this.lang != 'fa') {
            this.lang = 'fa';
            this.langSubject.next('fa');
        }
        else {
            this.lang = 'en';
            this.langSubject.next('en');
        }
    }
    /**
     * @return {?}
     */
    getLang() {
        return this.langSubject;
    }
    /**
     * @return {?}
     */
    changeLocale() {
        if (this.lang != 'fa') {
            this.setLocale('fa');
        }
        else {
            this.setLocale('en');
        }
    }
    /**
     * @param {?} date
     * @param {?=} force
     * @return {?}
     */
    getYear(date, force) {
        if (this.lang == 'fa' && !force) {
            return this.JDateAdapter.getYear((/** @type {?} */ (date)));
        }
        if (date._d) {
            return date._d.getFullYear();
        }
        if (!date.getFullYear) {
            debugger;
        }
        return date.getFullYear();
    }
    /**
     * @param {?} date
     * @param {?=} force
     * @return {?}
     */
    getMonth(date, force) {
        if (this.lang == 'fa' && !force) {
            return this.JDateAdapter.getMonth((/** @type {?} */ (date)));
        }
        if (date._d) {
            return date._d.getMonth();
        }
        return date.getMonth();
    }
    /**
     * @param {?} date
     * @param {?=} force
     * @return {?}
     */
    getDate(date, force) {
        if (this.lang == 'fa' && !force) {
            return this.JDateAdapter.getDate((/** @type {?} */ (date)));
        }
        if (date._d) {
            return date._d.getDate();
        }
        return date.getDate();
    }
    /**
     * @param {?} date
     * @param {?=} force
     * @return {?}
     */
    getDayOfWeek(date, force) {
        if (this.lang == 'fa' && !force) {
            return this.JDateAdapter.getDayOfWeek((/** @type {?} */ (date)));
        }
        return date.getDay();
    }
    /**
     * @param {?} style
     * @param {?=} force
     * @return {?}
     */
    getMonthNames(style, force) {
        if (this.lang == 'fa' && !force) {
            return this.JDateAdapter.getMonthNames(style);
        }
        if (SUPPORTS_INTL_API) {
            /** @type {?} */
            const dtf = new Intl.DateTimeFormat(this.locale, { month: style });
            return range(12, (/**
             * @param {?} i
             * @return {?}
             */
            i => this._stripDirectionalityCharacters(dtf.format(new Date(2017, i, 1)))));
        }
        return DEFAULT_MONTH_NAMES[style];
    }
    /**
     * @param {?=} force
     * @return {?}
     */
    getDateNames(force) {
        if (this.lang == 'fa' && !force) {
            return this.JDateAdapter.getDateNames();
        }
        if (SUPPORTS_INTL_API) {
            /** @type {?} */
            const dtf = new Intl.DateTimeFormat(this.locale, { day: 'numeric' });
            return range(31, (/**
             * @param {?} i
             * @return {?}
             */
            i => this._stripDirectionalityCharacters(dtf.format(new Date(2017, 0, i + 1)))));
        }
        return DEFAULT_DATE_NAMES;
    }
    /**
     * @param {?} style
     * @param {?=} force
     * @return {?}
     */
    getDayOfWeekNames(style, force) {
        if (this.lang == 'fa' && !force) {
            return this.JDateAdapter.getDayOfWeekNames(style);
        }
        if (SUPPORTS_INTL_API) {
            /** @type {?} */
            const dtf = new Intl.DateTimeFormat(this.locale, { weekday: style });
            return range(7, (/**
             * @param {?} i
             * @return {?}
             */
            i => this._stripDirectionalityCharacters(dtf.format(new Date(2017, 0, i + 1)))));
        }
        return DEFAULT_DAY_OF_WEEK_NAMES[style];
    }
    /**
     * @param {?} date
     * @param {?=} force
     * @return {?}
     */
    getYearName(date, force) {
        if (this.lang == 'fa' && !force) {
            return this.JDateAdapter.getYearName((/** @type {?} */ (date)));
        }
        if (SUPPORTS_INTL_API) {
            /** @type {?} */
            const dtf = new Intl.DateTimeFormat(this.locale, { year: 'numeric' });
            return this._stripDirectionalityCharacters(dtf.format(date));
        }
        return String(this.getYear(date));
    }
    /**
     * @param {?=} force
     * @return {?}
     */
    getFirstDayOfWeek(force) {
        if (this.lang == 'fa' && !force) {
            return this.JDateAdapter.getFirstDayOfWeek();
        }
        // We can't tell using native JS Date what the first day of the week is, we default to Sunday.
        return 0;
    }
    /**
     * @param {?} date
     * @param {?=} force
     * @return {?}
     */
    getNumDaysInMonth(date, force) {
        if (this.lang == 'fa' && !force) {
            return this.JDateAdapter.getNumDaysInMonth((/** @type {?} */ (date)), 'fa');
        }
        return this.getDate(this._createDateWithOverflow(this.getYear(date), this.getMonth(date) + 1, 0));
    }
    /**
     * @param {?} date
     * @return {?}
     */
    clone(date) {
        if (this.lang == 'fa') {
            return (/** @type {?} */ ((this.JDateAdapter.clone((/** @type {?} */ (date))))));
        }
        return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));
    }
    /**
     * @param {?} year
     * @param {?} month
     * @param {?} date
     * @return {?}
     */
    createDate(year, month, date) {
        if (this.lang == 'fa') {
            return (/** @type {?} */ ((this.JDateAdapter.createDate(year, month, date))));
        }
        // Check for invalid month and date (except upper bound on date which we have to check after
        // creating the Date).
        if (month < 0 || month > 11) {
            throw Error(`Invalid month index "${month}". Month index has to be between 0 and 11.`);
        }
        if (date < 1) {
            throw Error(`Invalid date "${date}". Date has to be greater than 0.`);
        }
        /** @type {?} */
        const result = this._createDateWithOverflow(year, month, date);
        // Check that the date wasn't above the upper bound for the month, causing the month to overflow
        if (result.getMonth() != month) {
            throw Error(`Invalid date "${date}" for month with index "${month}".`);
        }
        return result;
    }
    /**
     * @return {?}
     */
    today() {
        if (this.lang == 'fa') {
            return (/** @type {?} */ ((this.JDateAdapter.today())));
        }
        return new Date();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    parse(value) {
        if (this.lang == 'fa') {
            return (/** @type {?} */ (this.JDateAdapter.parse(value, [])));
        }
        // We have no way using the native JS Date to set the parse format or locale, so we ignore these
        // parameters.
        if (typeof value == 'number') {
            return new Date(value);
        }
        return value ? new Date(Date.parse(value)) : null;
    }
    /**
     * @param {?} date
     * @param {?} displayFormat
     * @return {?}
     */
    format(date, displayFormat) {
        if (this.lang == 'fa') {
            return this.JDateAdapter.format((/** @type {?} */ (date)), displayFormat);
        }
        if (!this.isValid(date)) {
            throw Error('NativeDateAdapter: Cannot format invalid date.');
        }
        if (SUPPORTS_INTL_API) {
            if (this.useUtcForDisplay) {
                if (date._d) {
                    date = new Date(Date.UTC(date._d.getFullYear(), date._d.getMonth(), date._d.getDate(), date._d.getHours(), date._d.getMinutes(), date._d.getSeconds(), date._d.getMilliseconds()));
                    displayFormat = extendObject({}, displayFormat, { timeZone: 'utc' });
                }
                else {
                    date = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));
                    displayFormat = extendObject({}, displayFormat, { timeZone: 'utc' });
                }
            }
            /** @type {?} */
            const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);
            return this._stripDirectionalityCharacters(dtf.format(date));
        }
        return this._stripDirectionalityCharacters(date.toDateString());
    }
    /**
     * @param {?} date
     * @param {?} years
     * @return {?}
     */
    addCalendarYears(date, years) {
        if (this.lang == 'fa') {
            return (/** @type {?} */ (this.JDateAdapter.addCalendarYears((/** @type {?} */ (date)), years)));
        }
        return this.addCalendarMonths(date, years * 12);
    }
    /**
     * @param {?} date
     * @param {?} months
     * @return {?}
     */
    addCalendarMonths(date, months) {
        if (this.lang == 'fa') {
            return (/** @type {?} */ (this.JDateAdapter.addCalendarMonths((/** @type {?} */ (date)), months)));
        }
        /** @type {?} */
        let newDate = this._createDateWithOverflow(this.getYear(date), this.getMonth(date) + months, this.getDate(date));
        // It's possible to wind up in the wrong month if the original month has more days than the new
        // month. In this case we want to go to the last day of the desired month.
        // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't
        // guarantee this.
        if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {
            newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);
        }
        return newDate;
    }
    /**
     * @param {?} date
     * @param {?} days
     * @return {?}
     */
    addCalendarDays(date, days) {
        if (this.lang == 'fa') {
            return (/** @type {?} */ (this.JDateAdapter.addCalendarDays((/** @type {?} */ (date)), days)));
        }
        return this._createDateWithOverflow(this.getYear(date), this.getMonth(date), this.getDate(date) + days);
    }
    /**
     * @param {?} date
     * @return {?}
     */
    getISODateString(date) {
        if (this.lang == 'fa') {
            return this.JDateAdapter.getISODateString((/** @type {?} */ (date)));
        }
        return [
            date.getUTCFullYear(),
            this._2digit(date.getUTCMonth() + 1),
            this._2digit(date.getUTCDate())
        ].join('-');
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    isDateInstance(obj) {
        return obj instanceof Date;
    }
    /**
     * @param {?} date
     * @return {?}
     */
    isValid(date) {
        if (date._d) {
            return !isNaN(date._d.getTime());
        }
        return !isNaN(date.getTime());
    }
    /**
     * Creates a date but allows the month and date to overflow.
     * @private
     * @param {?} year
     * @param {?} month
     * @param {?} date
     * @return {?}
     */
    _createDateWithOverflow(year, month, date) {
        /** @type {?} */
        const result = new Date(year, month, date);
        // We need to correct for the fact that JS native Date treats years in range [0, 99] as
        // abbreviations for 19xx.
        if (year >= 0 && year < 100) {
            result.setFullYear(this.getYear(result) - 1900);
        }
        return result;
    }
    /**
     * Pads a number to make it two digits.
     * @private
     * @param {?} n The number to pad.
     * @return {?} The padded number.
     */
    _2digit(n) {
        return ('00' + n).slice(-2);
    }
    /**
     * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while
     * other browsers do not. We remove them to make output consistent and because they interfere with
     * date parsing.
     * @private
     * @param {?} str The string to strip direction characters from.
     * @return {?} The stripped string.
     */
    _stripDirectionalityCharacters(str) {
        return str.replace(/[\u200e\u200f]/g, '');
    }
}
NativeDateAdapter.decorators = [
    { type: Injectable }
];
/** @nocollapse */
NativeDateAdapter.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [LOCALE_ID,] }] }
];
if (false) {
    /** @type {?} */
    NativeDateAdapter.prototype.lang;
    /** @type {?} */
    NativeDateAdapter.prototype.langSubject;
    /** @type {?} */
    NativeDateAdapter.prototype.JDateAdapter;
    /**
     * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.
     * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off
     * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`
     * will produce `'8/13/1800'`.
     * @type {?}
     */
    NativeDateAdapter.prototype.useUtcForDisplay;
}
export class dateFormat {
    /**
     * @param {?} _dateAdapter
     */
    constructor(_dateAdapter) {
        this.parse = {
            dateInput: 'l',
        };
        this.display = {
            dateInput: 'jYYYY/jMM/jDD',
            monthYearLabel: 'jYYYY jMMMM',
            dateA11yLabel: 'jYYYY/jMM/jDD',
            monthYearA11yLabel: 'jYYYY jMMMM'
        };
        this._getChanges = new Subject();
        this._lastChanges = new BehaviorSubject('fa');
        /** @type {?} */
        const dateAdapter = (/** @type {?} */ (_dateAdapter));
        dateAdapter.getLang().subscribe((/**
         * @param {?} v
         * @return {?}
         */
        v => {
            if (v == 'fa') {
                this.parse = {
                    dateInput: 'l',
                };
                this.display = {
                    dateInput: 'jYYYY/jMM/jDD',
                    monthYearLabel: 'jYYYY jMMMM',
                    dateA11yLabel: 'jYYYY/jMM/jDD',
                    monthYearA11yLabel: 'jYYYY jMMMM'
                };
            }
            else {
                this.parse = {
                    dateInput: null,
                };
                this.display = {
                    dateInput: { year: 'numeric', month: 'numeric', day: 'numeric' },
                    monthYearLabel: { year: 'numeric', month: 'short' },
                    dateA11yLabel: { year: 'numeric', month: 'long', day: 'numeric' },
                    monthYearA11yLabel: { year: 'numeric', month: 'long' },
                };
            }
            this._lastChanges.next(v);
            this._getChanges.next(v);
        }), (/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
        }), (/**
         * @return {?}
         */
        () => {
        }));
    }
    /**
     * @return {?}
     */
    getChanges() {
        return this._getChanges;
    }
}
if (false) {
    /** @type {?} */
    dateFormat.prototype.parse;
    /** @type {?} */
    dateFormat.prototype.display;
    /** @type {?} */
    dateFormat.prototype._getChanges;
    /** @type {?} */
    dateFormat.prototype._lastChanges;
}
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,