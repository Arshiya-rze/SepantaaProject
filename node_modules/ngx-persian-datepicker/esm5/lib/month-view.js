/**
 * @fileoverview added by tsickle
 * Generated from: lib/month-view.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, Inject, Input, Optional, Output, ViewEncapsulation } from '@angular/core';
import { MdCalendarCell } from './calendar-body';
import { createMissingDateImplError } from './datepicker-errors';
import { DateAdapter, MAT_DATE_FORMATS } from "@angular/material";
/** @type {?} */
var DAYS_PER_WEEK = 7;
/**
 * An internal component used to display a single month in the datepicker.
 * \@docs-private
 * @template D
 */
var MdMonthView = /** @class */ (function () {
    function MdMonthView(_dateAdapter, _dateFormats, ref) {
        var _this = this;
        this._dateAdapter = _dateAdapter;
        this._dateFormats = _dateFormats;
        /**
         * Emits when a new date is selected.
         */
        this.selectedChange = new EventEmitter();
        /**
         * Emits when any date is selected.
         */
        this.userSelection = new EventEmitter();
        if (!this._dateAdapter) {
            throw createMissingDateImplError('DateAdapter');
        }
        if (!this._dateFormats) {
            throw createMissingDateImplError('MD_DATE_FORMATS');
        }
        this._activeDate = this._dateAdapter.today();
        /** @type {?} */
        var any = (/** @type {?} */ (_dateFormats));
        this.mustDestroy = any.getChanges().subscribe((/**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            _this._init();
            ref.detectChanges();
        }), (/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
        }), (/**
         * @return {?}
         */
        function () {
        }));
        this.mustDestroy2 = any._lastChanges.subscribe((/**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            _this.lang = v;
        }));
    }
    Object.defineProperty(MdMonthView.prototype, "activeDate", {
        /**
         * The date to display in this month view (everything other than the month and year is ignored).
         */
        get: /**
         * The date to display in this month view (everything other than the month and year is ignored).
         * @return {?}
         */
        function () {
            return this._activeDate;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            var oldActiveDate = this._activeDate;
            this._activeDate = value || this._dateAdapter.today();
            if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {
                this._init();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdMonthView.prototype, "selected", {
        /** The currently selected date. */
        get: /**
         * The currently selected date.
         * @return {?}
         */
        function () {
            return this._selected;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._selected = value;
            this._selectedDate = this._getDateInCurrentMonth(this.selected);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdMonthView.prototype, "subedDate", {
        get: /**
         * @return {?}
         */
        function () {
            return this._subed;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._subed = value;
            this._subedDate = this._getDateInCurrentMonth(this.subedDate);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    MdMonthView.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.mustDestroy.unsubscribe();
        this.mustDestroy2.unsubscribe();
    };
    /**
     * @return {?}
     */
    MdMonthView.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        this._init();
    };
    /** Handles when a new date is selected. */
    /**
     * Handles when a new date is selected.
     * @param {?} date
     * @return {?}
     */
    MdMonthView.prototype._dateSelected = /**
     * Handles when a new date is selected.
     * @param {?} date
     * @return {?}
     */
    function (date) {
        /** @type {?} */
        var selectedYear = this._dateAdapter.getYear(this.activeDate);
        /** @type {?} */
        var selectedMonth = this._dateAdapter.getMonth(this.activeDate);
        /** @type {?} */
        var selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);
        this.selectedChange.emit(selectedDate);
        this.userSelection.emit();
    };
    /** Initializes this month view. */
    /**
     * Initializes this month view.
     * @private
     * @return {?}
     */
    MdMonthView.prototype._init = /**
     * Initializes this month view.
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();
        /** @type {?} */
        var narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');
        /** @type {?} */
        var longWeekdays = this._dateAdapter.getDayOfWeekNames('long');
        // Rotate the labels for days of the week based on the configured first day of the week.
        /** @type {?} */
        var weekdays = longWeekdays.map((/**
         * @param {?} long
         * @param {?} i
         * @return {?}
         */
        function (long, i) {
            return { long: long, narrow: narrowWeekdays[i] };
        }));
        this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));
        this._selectedDate = this._getDateInCurrentMonth(this.selected);
        this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());
        this._yearNumber = this._dateAdapter.getYear(this.activeDate);
        this._monthLabel =
            this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]
                .toLocaleUpperCase();
        /** @type {?} */
        var firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), this._dateAdapter.getMonth(this.activeDate), 1);
        this._firstWeekOffset =
            (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -
                this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;
        this._createWeekCells();
    };
    /** Creates MdCalendarCells for the dates in this month. */
    /**
     * Creates MdCalendarCells for the dates in this month.
     * @private
     * @return {?}
     */
    MdMonthView.prototype._createWeekCells = /**
     * Creates MdCalendarCells for the dates in this month.
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var daysInMonthFa;
        /** @type {?} */
        var dateNamesFa;
        /** @type {?} */
        var daysInMonth = this._dateAdapter.getNumDaysInMonth(this._activeDate);
        /** @type {?} */
        var dateNames = this._dateAdapter.getDateNames();
        if (((/** @type {?} */ (this._dateAdapter))).JDateAdapter) {
            /** @type {?} */
            var JAdapter = ((/** @type {?} */ (this._dateAdapter))).JDateAdapter;
            daysInMonthFa = JAdapter.getNumDaysInMonth(this._activeDate);
            dateNamesFa = JAdapter.getDateNames();
        }
        this._weeks = [[]];
        for (var i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {
            /** @type {?} */
            var ariaLabelFa = void 0;
            /** @type {?} */
            var dateFa = void 0;
            /** @type {?} */
            var dateEn = void 0;
            if (cell == DAYS_PER_WEEK) {
                this._weeks.push([]);
                cell = 0;
            }
            /** @type {?} */
            var date = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), this._dateAdapter.getMonth(this.activeDate), i + 1);
            /** @type {?} */
            var enabled = !this.dateFilter ||
                this.dateFilter(date);
            if (((/** @type {?} */ (this._dateAdapter))).JDateAdapter) {
                /** @type {?} */
                var JAdapter = ((/** @type {?} */ (this._dateAdapter))).JDateAdapter;
                dateFa = JAdapter.getDate(date);
                dateEn = ((/** @type {?} */ (this._dateAdapter.getDate)))(date, true);
                // ariaLabelFa = JAdapter.format(dateFa, '');
            }
            /** @type {?} */
            var ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);
            if (this.lang == 'en') {
                this._weeks[this._weeks.length - 1]
                    .push(new MdCalendarCell(i + 1, dateNames[i], ariaLabel, enabled, dateFa));
            }
            else {
                this._weeks[this._weeks.length - 1]
                    .push(new MdCalendarCell(i + 1, dateNames[i], ariaLabel, enabled, dateEn));
            }
        }
    };
    /**
     * Gets the date in this month that the given Date falls on.
     * Returns null if the given Date is in another month.
     */
    /**
     * Gets the date in this month that the given Date falls on.
     * Returns null if the given Date is in another month.
     * @private
     * @param {?} date
     * @return {?}
     */
    MdMonthView.prototype._getDateInCurrentMonth = /**
     * Gets the date in this month that the given Date falls on.
     * Returns null if the given Date is in another month.
     * @private
     * @param {?} date
     * @return {?}
     */
    function (date) {
        return this._hasSameMonthAndYear(date, this.activeDate) ?
            this._dateAdapter.getDate(date) : null;
    };
    /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */
    /**
     * Checks whether the 2 dates are non-null and fall within the same month of the same year.
     * @private
     * @param {?} d1
     * @param {?} d2
     * @return {?}
     */
    MdMonthView.prototype._hasSameMonthAndYear = /**
     * Checks whether the 2 dates are non-null and fall within the same month of the same year.
     * @private
     * @param {?} d1
     * @param {?} d2
     * @return {?}
     */
    function (d1, d2) {
        return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&
            this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));
    };
    MdMonthView.decorators = [
        { type: Component, args: [{
                    moduleId: module.id,
                    selector: 'md-month-view',
                    template: "<div class=\"mlabel\">{{_monthLabel}}<span>{{_yearNumber}}</span></div>\r\n<table class=\"mat-calendar-table\">\r\n  <thead class=\"mat-calendar-table-header\">\r\n    <tr><th *ngFor=\"let day of this?._weekdays\" [attr.aria-label]=\"day.long\">{{day.narrow}}</th></tr>\r\n    <tr><th class=\"mat-calendar-table-header-divider\" colspan=\"7\" aria-hidden=\"true\"></th></tr>\r\n  </thead>\r\n  <tbody md-calendar-body\r\n         role=\"grid\"\r\n         [label]=\"_monthLabel\"\r\n         [rows]=\"_weeks\"\r\n         [todayValue]=\"_todayDate\"\r\n         [selectedValue]=\"_selectedDate\"\r\n         [labelMinRequiredCells]=\"3\"\r\n         [activeCell]=\"_dateAdapter.getDate(activeDate) - 1\"\r\n         [subedValue]=\"_subedDate\"\r\n         (selectedValueChange)=\"_dateSelected($event)\">\r\n  </tbody>\r\n</table>\r\n",
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    /** @nocollapse */
    MdMonthView.ctorParameters = function () { return [
        { type: DateAdapter, decorators: [{ type: Optional }] },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DATE_FORMATS,] }] },
        { type: ChangeDetectorRef }
    ]; };
    MdMonthView.propDecorators = {
        activeDate: [{ type: Input }],
        selected: [{ type: Input }],
        subedDate: [{ type: Input }],
        dateFilter: [{ type: Input }],
        selectedChange: [{ type: Output }],
        userSelection: [{ type: Output }]
    };
    return MdMonthView;
}());
export { MdMonthView };
if (false) {
    /**
     * @type {?}
     * @private
     */
    MdMonthView.prototype._activeDate;
    /**
     * @type {?}
     * @private
     */
    MdMonthView.prototype._selected;
    /**
     * @type {?}
     * @private
     */
    MdMonthView.prototype._subed;
    /**
     * A function used to filter which dates are selectable.
     * @type {?}
     */
    MdMonthView.prototype.dateFilter;
    /**
     * Emits when a new date is selected.
     * @type {?}
     */
    MdMonthView.prototype.selectedChange;
    /**
     * Emits when any date is selected.
     * @type {?}
     */
    MdMonthView.prototype.userSelection;
    /**
     * The label for this month (e.g. "January 2017").
     * @type {?}
     */
    MdMonthView.prototype._monthLabel;
    /** @type {?} */
    MdMonthView.prototype._yearNumber;
    /**
     * Grid of calendar cells representing the dates of the month.
     * @type {?}
     */
    MdMonthView.prototype._weeks;
    /**
     * The number of blank cells in the first row before the 1st of the month.
     * @type {?}
     */
    MdMonthView.prototype._firstWeekOffset;
    /**
     * The date of the month that the currently selected Date falls on.
     * Null if the currently selected Date is in another month.
     * @type {?}
     */
    MdMonthView.prototype._selectedDate;
    /** @type {?} */
    MdMonthView.prototype._subedDate;
    /** @type {?} */
    MdMonthView.prototype.mustDestroy;
    /** @type {?} */
    MdMonthView.prototype.mustDestroy2;
    /**
     * The date of the month that today falls on. Null if today is in another month.
     * @type {?}
     */
    MdMonthView.prototype._todayDate;
    /**
     * The names of the weekdays.
     * @type {?}
     */
    MdMonthView.prototype._weekdays;
    /** @type {?} */
    MdMonthView.prototype.lang;
    /** @type {?} */
    MdMonthView.prototype._dateAdapter;
    /**
     * @type {?}
     * @private
     */
    MdMonthView.prototype._dateFormats;
}
//# sourceMappingURL=data:application/json;base64,