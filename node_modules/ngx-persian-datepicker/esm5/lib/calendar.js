/**
 * @fileoverview added by tsickle
 * Generated from: lib/calendar.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { ChangeDetectionStrategy, Component, ElementRef, EventEmitter, Inject, Input, NgZone, Optional, Output, ViewEncapsulation, ChangeDetectorRef, } from '@angular/core';
import { MdDatepickerIntl } from './datepicker-intl';
import { createMissingDateImplError } from './datepicker-errors';
import { DateAdapter, MAT_DATE_FORMATS } from '@angular/material';
import { DOWN_ARROW, END, HOME, LEFT_ARROW, PAGE_DOWN, RIGHT_ARROW, UP_ARROW } from '@angular/cdk/keycodes';
import { PAGE_UP } from '@angular/cdk/keycodes';
import { ENTER } from '@angular/cdk/keycodes';
import { first, merge } from 'rxjs/operators';
/**
 * A calendar that is used as part of the datepicker.
 * \@docs-private
 * @template D
 */
var MdCalendar = /** @class */ (function () {
    function MdCalendar(_elementRef, _intl, _ngZone, _dateAdapter, _dateFormats, changeDetectorRef) {
        var _this = this;
        this._elementRef = _elementRef;
        this._intl = _intl;
        this._ngZone = _ngZone;
        this._dateAdapter = _dateAdapter;
        this._dateFormats = _dateFormats;
        this._isCompatibilityMode = false;
        /**
         * Whether the calendar should be started in month or year view.
         */
        this.startView = 'month';
        this.type = 'normal';
        /**
         * Emits when the currently selected date changes.
         */
        this.selectedChange = new EventEmitter();
        /**
         * Emits when any date is selected.
         */
        this.userSelection = new EventEmitter();
        this.months = Array.from({ length: 12 }, (/**
         * @param {?} v
         * @param {?} k
         * @return {?}
         */
        function (v, k) { return k; }));
        /**
         * Date filter for the month and year views.
         */
        this._dateFilterForViews = (/**
         * @param {?} date
         * @return {?}
         */
        function (date) {
            return !!date && (!_this.dateFilter || _this.dateFilter(date)) && (!_this.minDate || _this._dateAdapter.compareDate(date, _this.minDate) >= 0) && (!_this.maxDate || _this._dateAdapter.compareDate(date, _this.maxDate) <= 0);
        });
        if (!this._dateAdapter) {
            throw createMissingDateImplError('DateAdapter');
        }
        if (!this._dateFormats) {
            throw createMissingDateImplError('MD_DATE_FORMATS');
        }
        this._intlChanges = _intl.changes.pipe(merge(this._dateFormats._getChanges)).subscribe((/**
         * @return {?}
         */
        function () {
            changeDetectorRef.markForCheck();
        }));
        this._dateAdapterr = ((/** @type {?} */ (_dateAdapter)));
    }
    Object.defineProperty(MdCalendar.prototype, "_activeNextDate", {
        /**
         * The current active date. This determines which time period is shown and which date is
         * highlighted when using keyboard navigation.
         */
        get: /**
         * The current active date. This determines which time period is shown and which date is
         * highlighted when using keyboard navigation.
         * @return {?}
         */
        function () {
            /** @type {?} */
            var date = this._dateAdapter.clone(this._activeDate);
            if (((/** @type {?} */ (date)))._d) {
                ((/** @type {?} */ (date))).add(1, 'jMonth');
                // (date as any)._d.setMonth((date as any)._d.getMonth() + 1);
                return ((/** @type {?} */ (date)))._d;
            }
            else {
                ((/** @type {?} */ (date))).setMonth(((/** @type {?} */ (date))).getMonth() + 1);
                return date;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdCalendar.prototype, "_activeDate", {
        get: /**
         * @return {?}
         */
        function () {
            return this._clampedActiveDate;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdCalendar.prototype, "_periodButtonText", {
        /** The label for the current calendar view. */
        get: /**
         * The label for the current calendar view.
         * @return {?}
         */
        function () {
            return this._monthView ? this._dateAdapter.format(this._activeDate, this._dateFormats.display.monthYearLabel)
                .toLocaleUpperCase() : this._dateAdapter.getYearName(this._activeDate);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdCalendar.prototype, "_periodButtonLabel", {
        get: /**
         * @return {?}
         */
        function () {
            return this._monthView ? this._intl.switchToYearViewLabel : this._intl.switchToMonthViewLabel;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdCalendar.prototype, "_prevButtonLabel", {
        /** The label for the the previous button. */
        get: /**
         * The label for the the previous button.
         * @return {?}
         */
        function () {
            return this._monthView ? this._intl.prevMonthLabel : this._intl.prevYearLabel;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdCalendar.prototype, "_nextButtonLabel", {
        /** The label for the the next button. */
        get: /**
         * The label for the the next button.
         * @return {?}
         */
        function () {
            return this._monthView ? this._intl.nextMonthLabel : this._intl.nextYearLabel;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    MdCalendar.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        this._activeDate = this.startAt || this._dateAdapter.today();
        this._focusActiveCell();
        this._monthView = this.startView != 'year';
        //fill year drop
        // main page
        if (this.minDate && this.maxDate) {
            this.foods = Array.from({ length: 100 }, (/**
             * @param {?} v
             * @param {?} k
             * @return {?}
             */
            function (v, k) { return 10 - k; }));
        }
        else if (this.minDate && !this.maxDate) {
            this.foods = Array.from({ length: 100 }, (/**
             * @param {?} v
             * @param {?} k
             * @return {?}
             */
            function (v, k) { return 10 - k; }));
        }
        else if (this.maxDate && !this.minDate) {
            this.foods = Array.from({ length: 100 }, (/**
             * @param {?} v
             * @param {?} k
             * @return {?}
             */
            function (v, k) { return 10 - k; }));
        }
        //for old dates like birthday
        else {
            this.foods = Array.from({ length: 100 }, (/**
             * @param {?} v
             * @param {?} k
             * @return {?}
             */
            function (v, k) { return 10 - k; }));
        }
    };
    /**
     * @param {?} v
     * @return {?}
     */
    MdCalendar.prototype._showDropYear = /**
     * @param {?} v
     * @return {?}
     */
    function (v) {
        return this._dateAdapter.getYear(this._dateAdapter.addCalendarYears((this.startAt || (/** @type {?} */ (new Date()))), v));
    };
    /**
     * @param {?} v
     * @return {?}
     */
    MdCalendar.prototype._showDropMonth = /**
     * @param {?} v
     * @return {?}
     */
    function (v) {
        return this._dateAdapter.getMonthNames("long")[v];
    };
    /**
     * @param {?} v
     * @return {?}
     */
    MdCalendar.prototype._yearSelected = /**
     * @param {?} v
     * @return {?}
     */
    function (v) {
        this._activeDate = this._dateAdapter.addCalendarYears(this.startAt || (/** @type {?} */ (new Date())), v.value);
    };
    /**
     * @param {?} v
     * @return {?}
     */
    MdCalendar.prototype._monthSelectedd = /**
     * @param {?} v
     * @return {?}
     */
    function (v) {
        /** @type {?} */
        var daysInMonth = this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(this._dateAdapter.getYear(this._activeDate), v.value, 1));
        this._activeDate = this._dateAdapter.createDate(this._dateAdapter.getYear(this._activeDate), v.value, Math.min(this._dateAdapter.getDate(this._activeDate), daysInMonth));
    };
    /**
     * @return {?}
     */
    MdCalendar.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._intlChanges.unsubscribe();
    };
    /** Handles date selection in the month view. */
    /**
     * Handles date selection in the month view.
     * @param {?} date
     * @return {?}
     */
    MdCalendar.prototype._dateSelected = /**
     * Handles date selection in the month view.
     * @param {?} date
     * @return {?}
     */
    function (date) {
        this.selectedChange.emit(date);
    };
    /**
     * @return {?}
     */
    MdCalendar.prototype._userSelected = /**
     * @return {?}
     */
    function () {
        this.userSelection.emit();
    };
    /** Handles month selection in the year view. */
    /**
     * Handles month selection in the year view.
     * @param {?} month
     * @return {?}
     */
    MdCalendar.prototype._monthSelected = /**
     * Handles month selection in the year view.
     * @param {?} month
     * @return {?}
     */
    function (month) {
        this._activeDate = month;
        this._monthView = true;
    };
    /** Handles user clicks on the period label. */
    /**
     * Handles user clicks on the period label.
     * @return {?}
     */
    MdCalendar.prototype._currentPeriodClicked = /**
     * Handles user clicks on the period label.
     * @return {?}
     */
    function () {
        this._monthView = !this._monthView;
    };
    /** Handles user clicks on the previous button. */
    /**
     * Handles user clicks on the previous button.
     * @return {?}
     */
    MdCalendar.prototype._previousClicked = /**
     * Handles user clicks on the previous button.
     * @return {?}
     */
    function () {
        this._activeDate = this._monthView ? this._dateAdapter.addCalendarMonths(this._activeDate, -1) : this._dateAdapter.addCalendarYears(this._activeDate, -1);
    };
    /** Handles user clicks on the next button. */
    /**
     * Handles user clicks on the next button.
     * @return {?}
     */
    MdCalendar.prototype._nextClicked = /**
     * Handles user clicks on the next button.
     * @return {?}
     */
    function () {
        this._activeDate = this._monthView ? this._dateAdapter.addCalendarMonths(this._activeDate, 1) : this._dateAdapter.addCalendarYears(this._activeDate, 1);
    };
    /** Whether the previous period button is enabled. */
    /**
     * Whether the previous period button is enabled.
     * @return {?}
     */
    MdCalendar.prototype._previousEnabled = /**
     * Whether the previous period button is enabled.
     * @return {?}
     */
    function () {
        if (!this.minDate) {
            return true;
        }
        return !this.minDate || !this._isSameView(this._activeDate, this.minDate);
    };
    /** Whether the next period button is enabled. */
    /**
     * Whether the next period button is enabled.
     * @return {?}
     */
    MdCalendar.prototype._nextEnabled = /**
     * Whether the next period button is enabled.
     * @return {?}
     */
    function () {
        return !this.maxDate || !this._isSameView(this._activeDate, this.maxDate);
    };
    /** Handles keydown events on the calendar body. */
    /**
     * Handles keydown events on the calendar body.
     * @param {?} event
     * @return {?}
     */
    MdCalendar.prototype._handleCalendarBodyKeydown = /**
     * Handles keydown events on the calendar body.
     * @param {?} event
     * @return {?}
     */
    function (event) {
        // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent
        // disabled ones from being selected. This may not be ideal, we should look into whether
        // navigation should skip over disabled dates, and if so, how to implement that efficiently.
        if (this._monthView) {
            this._handleCalendarBodyKeydownInMonthView(event);
        }
        else {
            this._handleCalendarBodyKeydownInYearView(event);
        }
    };
    /** Focuses the active cell after the microtask queue is empty. */
    /**
     * Focuses the active cell after the microtask queue is empty.
     * @return {?}
     */
    MdCalendar.prototype._focusActiveCell = /**
     * Focuses the active cell after the microtask queue is empty.
     * @return {?}
     */
    function () {
        var _this = this;
        this._ngZone.runOutsideAngular((/**
         * @return {?}
         */
        function () { return first.call(_this._ngZone.onStable).subscribe((/**
         * @return {?}
         */
        function () {
            _this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();
        })); }));
    };
    /** Whether the two dates represent the same view in the current view mode (month or year). */
    /**
     * Whether the two dates represent the same view in the current view mode (month or year).
     * @private
     * @param {?} date1
     * @param {?} date2
     * @return {?}
     */
    MdCalendar.prototype._isSameView = /**
     * Whether the two dates represent the same view in the current view mode (month or year).
     * @private
     * @param {?} date1
     * @param {?} date2
     * @return {?}
     */
    function (date1, date2) {
        return this._monthView ? this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) && this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2) : this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);
    };
    /** Handles keydown events on the calendar body when calendar is in month view. */
    /**
     * Handles keydown events on the calendar body when calendar is in month view.
     * @private
     * @param {?} event
     * @return {?}
     */
    MdCalendar.prototype._handleCalendarBodyKeydownInMonthView = /**
     * Handles keydown events on the calendar body when calendar is in month view.
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        switch (event.keyCode) {
            case LEFT_ARROW:
                this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -1);
                break;
            case RIGHT_ARROW:
                this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 1);
                break;
            case UP_ARROW:
                this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);
                break;
            case DOWN_ARROW:
                this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);
                break;
            case HOME:
                this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 1 - this._dateAdapter.getDate(this._activeDate));
                break;
            case END:
                this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, (this._dateAdapter.getNumDaysInMonth(this._activeDate) - this._dateAdapter.getDate(this._activeDate)));
                break;
            case PAGE_UP:
                this._activeDate = event.altKey ? this._dateAdapter.addCalendarYears(this._activeDate, -1) : this._dateAdapter.addCalendarMonths(this._activeDate, -1);
                break;
            case PAGE_DOWN:
                this._activeDate = event.altKey ? this._dateAdapter.addCalendarYears(this._activeDate, 1) : this._dateAdapter.addCalendarMonths(this._activeDate, 1);
                break;
            case ENTER:
                if (this._dateFilterForViews(this._activeDate)) {
                    this._dateSelected(this._activeDate);
                    // Prevent unexpected default actions such as form submission.
                    event.preventDefault();
                }
                return;
            default:
                // Don't prevent default or focus active cell on keys that we don't explicitly handle.
                return;
        }
        this._focusActiveCell();
        // Prevent unexpected default actions such as form submission.
        event.preventDefault();
    };
    /** Handles keydown events on the calendar body when calendar is in year view. */
    /**
     * Handles keydown events on the calendar body when calendar is in year view.
     * @private
     * @param {?} event
     * @return {?}
     */
    MdCalendar.prototype._handleCalendarBodyKeydownInYearView = /**
     * Handles keydown events on the calendar body when calendar is in year view.
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        switch (event.keyCode) {
            case LEFT_ARROW:
                this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -1);
                break;
            case RIGHT_ARROW:
                this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 1);
                break;
            case UP_ARROW:
                this._activeDate = this._prevMonthInSameCol(this._activeDate);
                break;
            case DOWN_ARROW:
                this._activeDate = this._nextMonthInSameCol(this._activeDate);
                break;
            case HOME:
                this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -this._dateAdapter.getMonth(this._activeDate));
                break;
            case END:
                this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 11 - this._dateAdapter.getMonth(this._activeDate));
                break;
            case PAGE_UP:
                this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);
                break;
            case PAGE_DOWN:
                this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);
                break;
            case ENTER:
                this._monthSelected(this._activeDate);
                break;
            default:
                // Don't prevent default or focus active cell on keys that we don't explicitly handle.
                return;
        }
        this._focusActiveCell();
        // Prevent unexpected default actions such as form submission.
        event.preventDefault();
    };
    /**
     * Determine the date for the month that comes before the given month in the same column in the
     * calendar table.
     */
    /**
     * Determine the date for the month that comes before the given month in the same column in the
     * calendar table.
     * @private
     * @param {?} date
     * @return {?}
     */
    MdCalendar.prototype._prevMonthInSameCol = /**
     * Determine the date for the month that comes before the given month in the same column in the
     * calendar table.
     * @private
     * @param {?} date
     * @return {?}
     */
    function (date) {
        // Determine how many months to jump forward given that there are 2 empty slots at the beginning
        // of each year.
        /** @type {?} */
        var increment = this._dateAdapter.getMonth(date) <= 4 ? -5 : (this._dateAdapter.getMonth(date) >= 7 ? -7 : -12);
        return this._dateAdapter.addCalendarMonths(date, increment);
    };
    /**
     * Determine the date for the month that comes after the given month in the same column in the
     * calendar table.
     */
    /**
     * Determine the date for the month that comes after the given month in the same column in the
     * calendar table.
     * @private
     * @param {?} date
     * @return {?}
     */
    MdCalendar.prototype._nextMonthInSameCol = /**
     * Determine the date for the month that comes after the given month in the same column in the
     * calendar table.
     * @private
     * @param {?} date
     * @return {?}
     */
    function (date) {
        // Determine how many months to jump forward given that there are 2 empty slots at the beginning
        // of each year.
        /** @type {?} */
        var increment = this._dateAdapter.getMonth(date) <= 4 ? 7 : (this._dateAdapter.getMonth(date) >= 7 ? 5 : 12);
        return this._dateAdapter.addCalendarMonths(date, increment);
    };
    MdCalendar.decorators = [
        { type: Component, args: [{
                    selector: 'md-calendar, mat-calendar',
                    template: "<div class=\"calendar-drops\">\r\n    <!--<button *ngIf=\"!_isCompatibilityMode\" [disableRipple]=\"true\" mat-button class=\"mat-calendar-period-button\"-->\r\n    <!--(click)=\"_currentPeriodClicked()\" [attr.aria-label]=\"_periodButtonLabel\">-->\r\n    <!--\u0645\u0627\u0647-->\r\n    <!--<div class=\"mat-calendar-arrow\" [class.mat-calendar-invert]=\"!_monthView\"></div>-->\r\n    <!--</button>-->\r\n    <!--<button *ngIf=\"_isCompatibilityMode\" mat-button class=\"mat-calendar-period-button\"-->\r\n    <!--(click)=\"_currentPeriodClicked()\" [attr.aria-label]=\"_periodButtonLabel\">-->\r\n    <!--\u0645\u0627\u0647-->\r\n    <!--<div class=\"mat-calendar-arrow\" [class.mat-calendar-invert]=\"!_monthView\"></div>-->\r\n    <!--</button>-->\r\n\r\n    <mat-select #yearsDrop placeholder=\"\u0633\u0627\u0644\" style=\"width: 50px;\"\r\n                (change)=\"yearsDrop.value = null;_yearSelected($event)\"\r\n                panelClass=\"drops-panels years {{(_dateAdapterr?.lang == 'en') ? 'latin' :''}}\">\r\n        <mat-option *ngFor=\"let food of foods\" [value]=\"food\">\r\n            {{ _showDropYear(food) }}\r\n        </mat-option>\r\n    </mat-select>\r\n    <mat-select #monthsDrop placeholder=\"\u0645\u0627\u0647\" style=\"width: 70px;\"\r\n                (change)=\"monthsDrop.value = null;_monthSelectedd($event)\"\r\n                panelClass=\"drops-panels months {{(_dateAdapterr?.lang == 'en') ? 'latin' :''}}\">\r\n        <mat-option *ngFor=\"let month of months\" [value]=\"month\">\r\n            {{ _showDropMonth(month) }}\r\n        </mat-option>\r\n    </mat-select>\r\n\r\n</div>\r\n<div class=\"mat-calendar-header\">\r\n    <div class=\"mat-calendar-controls\" [class.month]=\"_monthView\">\r\n        <!--\r\n          TODO(mmalerba): Clean up duplicated compatibility mode code when we have a better way to do\r\n          this.\r\n        -->\r\n\r\n        <!--additions by puria-->\r\n        <ng-content></ng-content>\r\n\r\n\r\n        <!-- Check for compatibility mode and use correct prefix for md-icon-button. -->\r\n        <button *ngIf=\"!_isCompatibilityMode\" mat-icon-button class=\"mat-calendar-previous-button\"\r\n                [disabled]=\"!_previousEnabled()\" (click)=\"_previousClicked()\"\r\n                [attr.aria-label]=\"_prevButtonLabel\">\r\n        </button>\r\n        <button *ngIf=\"_isCompatibilityMode\" mat-icon-button class=\"mat-calendar-previous-button\"\r\n                [disabled]=\"!_previousEnabled()\" (click)=\"_previousClicked()\"\r\n                [attr.aria-label]=\"_prevButtonLabel\">\r\n        </button>\r\n\r\n        <!-- Check for compatibility mode and use correct prefix for md-button. -->\r\n\r\n\r\n        <div class=\"mat-calendar-spacer\"></div>\r\n\r\n\r\n        <!-- Check for compatibility mode and use correct prefix for md-icon-button. -->\r\n        <button *ngIf=\"!_isCompatibilityMode\" mat-icon-button class=\"mat-calendar-next-button\"\r\n                [disabled]=\"!_nextEnabled()\" (click)=\"_nextClicked()\"\r\n                [attr.aria-label]=\"_nextButtonLabel\">\r\n        </button>\r\n        <button *ngIf=\"_isCompatibilityMode\" mat-icon-button class=\"mat-calendar-next-button\"\r\n                [disabled]=\"!_nextEnabled()\" (click)=\"_nextClicked()\"\r\n                [attr.aria-label]=\"_nextButtonLabel\">\r\n        </button>\r\n    </div>\r\n</div>\r\n\r\n<div class=\"mat-calendar-content\" (keydown)=\"_handleCalendarBodyKeydown($event)\"\r\n     [ngSwitch]=\"_monthView\" cdkMonitorSubtreeFocus>\r\n    <md-month-view\r\n        *ngSwitchCase=\"true\"\r\n        [activeDate]=\"_activeDate\"\r\n        [subedDate]=\"subed\"\r\n        [selected]=\"selected\"\r\n        [dateFilter]=\"_dateFilterForViews\"\r\n        (selectedChange)=\"_dateSelected($event)\"\r\n        (userSelection)=\"_userSelected()\">\r\n    </md-month-view>\r\n    <md-month-view\r\n        *ngIf=\"type == 'wide' && _monthView\"\r\n        [activeDate]=\"_activeNextDate\"\r\n        [subedDate]=\"subed\"\r\n        [selected]=\"selected\"\r\n        [dateFilter]=\"_dateFilterForViews\"\r\n        (selectedChange)=\"_dateSelected($event)\"\r\n        (userSelection)=\"_userSelected()\">\r\n    </md-month-view>\r\n    <md-year-view\r\n        *ngSwitchDefault\r\n        [activeDate]=\"_activeDate\"\r\n        [selected]=\"selected\"\r\n        [dateFilter]=\"_dateFilterForViews\"\r\n        (selectedChange)=\"_monthSelected($event)\">\r\n    </md-year-view>\r\n</div>\r\n",
                    host: {
                        'class': 'mat-calendar', '[class.wide-calendar]': '(type == "wide")'
                    },
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    styles: [".mat-calendar{display:block}.mat-calendar-header{padding:16px}.mat-calendar-content{margin:0;padding:0 8px 8px;outline:0}.mat-calendar-controls{display:flex;margin:0}.mat-calendar-spacer{flex:1 1 auto}.mat-calendar-period-button{min-width:0}.mat-calendar-period-button:hover .mat-button-focus-overlay{opacity:0}.subed{background:#ffd2de}.calendar-drops{position:absolute;top:12px;left:26px;display:flex;flex-direction:row-reverse;align-items:flex-end}.calendar-drops .mat-select-value{text-align:left}.drops-panels.months .mat-select-panel{width:70px}.drops-panels .mat-select-panel{width:50px}.drops-panels .mat-option-text{font-size:13px}.mat-calendar-arrow{display:inline-block;width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top-width:5px;border-top-style:solid;margin:0!important;vertical-align:middle}.mat-calendar-arrow.mat-calendar-invert{transform:rotate(180deg)}[dir=rtl] .mat-calendar-arrow{margin:0 5px 0 0}.mat-calendar-next-button,.mat-calendar-previous-button{position:relative}.mat-calendar-next-button::after,.mat-calendar-previous-button::after{top:0;left:0;right:0;bottom:0;position:absolute;content:\"\";margin:15.5px;border:0 solid currentColor;border-top-width:2px}[dir=rtl] .mat-calendar-next-button,[dir=rtl] .mat-calendar-previous-button{transform:rotate(180deg)}.mat-calendar-previous-button::after{border-left-width:2px;transform:translateX(2px) rotate(-45deg) scale(-1)}.mat-calendar-next-button::after{border-right-width:2px;transform:translateX(-2px) rotate(45deg) scale(-1)}.mat-calendar-table{border-spacing:0;border-collapse:collapse;width:100%}.mat-calendar-table-header th{text-align:center;padding:0 0 8px}.mat-calendar-table-header-divider{position:relative;height:1px}.mat-calendar-table-header-divider::after{content:\"\";position:absolute;top:0;left:-8px;right:-8px;height:1px}"]
                }] }
    ];
    /** @nocollapse */
    MdCalendar.ctorParameters = function () { return [
        { type: ElementRef },
        { type: MdDatepickerIntl },
        { type: NgZone },
        { type: DateAdapter, decorators: [{ type: Optional }] },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DATE_FORMATS,] }] },
        { type: ChangeDetectorRef }
    ]; };
    MdCalendar.propDecorators = {
        startAt: [{ type: Input }],
        startView: [{ type: Input }],
        type: [{ type: Input }],
        selected: [{ type: Input }],
        subed: [{ type: Input }],
        minDate: [{ type: Input }],
        maxDate: [{ type: Input }],
        dateFilter: [{ type: Input }],
        selectedChange: [{ type: Output }],
        userSelection: [{ type: Output }]
    };
    return MdCalendar;
}());
export { MdCalendar };
if (false) {
    /**
     * @type {?}
     * @private
     */
    MdCalendar.prototype._intlChanges;
    /** @type {?} */
    MdCalendar.prototype._isCompatibilityMode;
    /**
     * A date representing the period (month or year) to start the calendar in.
     * @type {?}
     */
    MdCalendar.prototype.startAt;
    /**
     * Whether the calendar should be started in month or year view.
     * @type {?}
     */
    MdCalendar.prototype.startView;
    /** @type {?} */
    MdCalendar.prototype.type;
    /**
     * The currently selected date.
     * @type {?}
     */
    MdCalendar.prototype.selected;
    /** @type {?} */
    MdCalendar.prototype.subed;
    /**
     * The minimum selectable date.
     * @type {?}
     */
    MdCalendar.prototype.minDate;
    /**
     * The maximum selectable date.
     * @type {?}
     */
    MdCalendar.prototype.maxDate;
    /**
     * A function used to filter which dates are selectable.
     * @type {?}
     */
    MdCalendar.prototype.dateFilter;
    /**
     * Emits when the currently selected date changes.
     * @type {?}
     */
    MdCalendar.prototype.selectedChange;
    /**
     * Emits when any date is selected.
     * @type {?}
     */
    MdCalendar.prototype.userSelection;
    /** @type {?} */
    MdCalendar.prototype.months;
    /**
     * Date filter for the month and year views.
     * @type {?}
     */
    MdCalendar.prototype._dateFilterForViews;
    /** @type {?} */
    MdCalendar.prototype._dateAdapterr;
    /** @type {?} */
    MdCalendar.prototype.foods;
    /**
     * @type {?}
     * @private
     */
    MdCalendar.prototype._clampedActiveDate;
    /**
     * @type {?}
     * @private
     */
    MdCalendar.prototype._clampedSubedDate;
    /**
     * Whether the calendar is in month view.
     * @type {?}
     */
    MdCalendar.prototype._monthView;
    /**
     * @type {?}
     * @private
     */
    MdCalendar.prototype._elementRef;
    /**
     * @type {?}
     * @private
     */
    MdCalendar.prototype._intl;
    /**
     * @type {?}
     * @private
     */
    MdCalendar.prototype._ngZone;
    /**
     * @type {?}
     * @private
     */
    MdCalendar.prototype._dateAdapter;
    /**
     * @type {?}
     * @private
     */
    MdCalendar.prototype._dateFormats;
}
//# sourceMappingURL=data:application/json;base64,