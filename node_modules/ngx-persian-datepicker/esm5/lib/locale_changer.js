/**
 * @fileoverview added by tsickle
 * Generated from: lib/locale_changer.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { ChangeDetectionStrategy, Component, Inject, Optional, ViewEncapsulation } from '@angular/core';
import { createMissingDateImplError } from './datepicker-errors';
import { DateAdapter, MAT_DATE_FORMATS } from '@angular/material';
/**
 * An internal component used to display a single year in the datepicker.
 * \@docs-private
 * @template D
 */
var MdLocaleChanger = /** @class */ (function () {
    function MdLocaleChanger(_dateAdapter, _dateFormats) {
        var _this = this;
        this._dateAdapter = _dateAdapter;
        this._dateFormats = _dateFormats;
        if (!this._dateAdapter) {
            throw createMissingDateImplError('DateAdapter');
        }
        if (!this._dateFormats) {
            throw createMissingDateImplError('MD_DATE_FORMATS');
        }
        this.any = (/** @type {?} */ (_dateAdapter));
        this.mustDestroy = ((/** @type {?} */ (_dateFormats)))._lastChanges.subscribe((/**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            _this.lang = v;
        }));
    }
    /**
     * @return {?}
     */
    MdLocaleChanger.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.mustDestroy.unsubscribe();
    };
    // change locale function()
    // change locale function()
    /**
     * @return {?}
     */
    MdLocaleChanger.prototype._changeLocale = 
    // change locale function()
    /**
     * @return {?}
     */
    function () {
        this.any.changeLocale();
    };
    MdLocaleChanger.decorators = [
        { type: Component, args: [{
                    moduleId: module.id,
                    selector: 'md-locale-changer',
                    template: "\n        <mat-button-toggle-group #group=\"matButtonToggleGroup\" (change)=\"_changeLocale()\" [value]=\"lang\">\n            <mat-button-toggle value=\"fa\">\n                \u0634\u0645\u0633\u06CC\n            </mat-button-toggle>\n            <mat-button-toggle value=\"en\">\n                \u0645\u06CC\u0644\u0627\u062F\u06CC\n            </mat-button-toggle>\n        </mat-button-toggle-group>\n    ",
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    styles: [".mat-button-toggle-group .mat-button-toggle{font-size:11px}.mat-button-toggle-group .mat-button-toggle .mat-button-toggle-label-content{line-height:26px}"]
                }] }
    ];
    /** @nocollapse */
    MdLocaleChanger.ctorParameters = function () { return [
        { type: DateAdapter, decorators: [{ type: Optional }] },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DATE_FORMATS,] }] }
    ]; };
    return MdLocaleChanger;
}());
export { MdLocaleChanger };
if (false) {
    /** @type {?} */
    MdLocaleChanger.prototype.any;
    /** @type {?} */
    MdLocaleChanger.prototype.lang;
    /** @type {?} */
    MdLocaleChanger.prototype.mustDestroy;
    /** @type {?} */
    MdLocaleChanger.prototype._dateAdapter;
    /**
     * @type {?}
     * @private
     */
    MdLocaleChanger.prototype._dateFormats;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9jYWxlX2NoYW5nZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtcGVyc2lhbi1kYXRlcGlja2VyLyIsInNvdXJjZXMiOlsibGliL2xvY2FsZV9jaGFuZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQVFBLE9BQU8sRUFDSCx1QkFBdUIsRUFDdkIsU0FBUyxFQUNULE1BQU0sRUFDTixRQUFRLEVBQ1IsaUJBQWlCLEVBQ3BCLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBQywwQkFBMEIsRUFBQyxNQUFNLHFCQUFxQixDQUFDO0FBQy9ELE9BQU8sRUFBQyxXQUFXLEVBQUUsZ0JBQWdCLEVBQUMsTUFBTSxtQkFBbUIsQ0FBQzs7Ozs7O0FBT2hFO0lBc0JJLHlCQUErQixZQUE0QixFQUNELFlBQWlCO1FBRDNFLGlCQVlDO1FBWjhCLGlCQUFZLEdBQVosWUFBWSxDQUFnQjtRQUNELGlCQUFZLEdBQVosWUFBWSxDQUFLO1FBQ3ZFLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFO1lBQ3BCLE1BQU0sMEJBQTBCLENBQUMsYUFBYSxDQUFDLENBQUM7U0FDbkQ7UUFDRCxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRTtZQUNwQixNQUFNLDBCQUEwQixDQUFDLGlCQUFpQixDQUFDLENBQUM7U0FDdkQ7UUFDRCxJQUFJLENBQUMsR0FBRyxHQUFHLG1CQUFBLFlBQVksRUFBTyxDQUFDO1FBQy9CLElBQUksQ0FBQyxXQUFXLEdBQUcsQ0FBQyxtQkFBQSxZQUFZLEVBQU8sQ0FBQyxDQUFDLFlBQVksQ0FBQyxTQUFTOzs7O1FBQUMsVUFBQyxDQUFDO1lBQzlELEtBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDO1FBQ2xCLENBQUMsRUFBQyxDQUFDO0lBQ1AsQ0FBQzs7OztJQUVELHFDQUFXOzs7SUFBWDtRQUNJLElBQUksQ0FBQyxXQUFXLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDbkMsQ0FBQztJQUVELDJCQUEyQjs7Ozs7SUFDM0IsdUNBQWE7Ozs7O0lBQWI7UUFDSSxJQUFJLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQzVCLENBQUM7O2dCQTNDSixTQUFTLFNBQUM7b0JBQ1AsUUFBUSxFQUFFLE1BQU0sQ0FBQyxFQUFFO29CQUNuQixRQUFRLEVBQUUsbUJBQW1CO29CQUM3QixRQUFRLEVBQUUsNlpBU1Q7b0JBRUQsYUFBYSxFQUFFLGlCQUFpQixDQUFDLElBQUk7b0JBQ3JDLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNOztpQkFDbEQ7Ozs7Z0JBdkJPLFdBQVcsdUJBNkJGLFFBQVE7Z0RBQ1IsUUFBUSxZQUFJLE1BQU0sU0FBQyxnQkFBZ0I7O0lBdUJwRCxzQkFBQztDQUFBLEFBOUNELElBOENDO1NBN0JZLGVBQWU7OztJQUN4Qiw4QkFBSTs7SUFDSiwrQkFBSzs7SUFDTCxzQ0FBWTs7SUFFQSx1Q0FBK0M7Ozs7O0lBQy9DLHVDQUErRCIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cclxuICpcclxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcclxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxyXG4gKi9cclxuXHJcbmltcG9ydCB7XHJcbiAgICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcclxuICAgIENvbXBvbmVudCxcclxuICAgIEluamVjdCwgT25EZXN0cm95LFxyXG4gICAgT3B0aW9uYWwsXHJcbiAgICBWaWV3RW5jYXBzdWxhdGlvblxyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQge2NyZWF0ZU1pc3NpbmdEYXRlSW1wbEVycm9yfSBmcm9tICcuL2RhdGVwaWNrZXItZXJyb3JzJztcclxuaW1wb3J0IHtEYXRlQWRhcHRlciwgTUFUX0RBVEVfRk9STUFUU30gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwnO1xyXG5cclxuXHJcbi8qKlxyXG4gKiBBbiBpbnRlcm5hbCBjb21wb25lbnQgdXNlZCB0byBkaXNwbGF5IGEgc2luZ2xlIHllYXIgaW4gdGhlIGRhdGVwaWNrZXIuXHJcbiAqIEBkb2NzLXByaXZhdGVcclxuICovXHJcbkBDb21wb25lbnQoe1xyXG4gICAgbW9kdWxlSWQ6IG1vZHVsZS5pZCxcclxuICAgIHNlbGVjdG9yOiAnbWQtbG9jYWxlLWNoYW5nZXInLFxyXG4gICAgdGVtcGxhdGU6IGBcclxuICAgICAgICA8bWF0LWJ1dHRvbi10b2dnbGUtZ3JvdXAgI2dyb3VwPVwibWF0QnV0dG9uVG9nZ2xlR3JvdXBcIiAoY2hhbmdlKT1cIl9jaGFuZ2VMb2NhbGUoKVwiIFt2YWx1ZV09XCJsYW5nXCI+XHJcbiAgICAgICAgICAgIDxtYXQtYnV0dG9uLXRvZ2dsZSB2YWx1ZT1cImZhXCI+XHJcbiAgICAgICAgICAgICAgICDYtNmF2LPbjFxyXG4gICAgICAgICAgICA8L21hdC1idXR0b24tdG9nZ2xlPlxyXG4gICAgICAgICAgICA8bWF0LWJ1dHRvbi10b2dnbGUgdmFsdWU9XCJlblwiPlxyXG4gICAgICAgICAgICAgICAg2YXbjNmE2KfYr9uMXHJcbiAgICAgICAgICAgIDwvbWF0LWJ1dHRvbi10b2dnbGU+XHJcbiAgICAgICAgPC9tYXQtYnV0dG9uLXRvZ2dsZS1ncm91cD5cclxuICAgIGAsXHJcbiAgICBzdHlsZVVybHM6IFsnbG9jYWxlLWNoYW5nZXIuc2NzcyddLFxyXG4gICAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZSxcclxuICAgIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgTWRMb2NhbGVDaGFuZ2VyPEQ+IGltcGxlbWVudHMgT25EZXN0cm95IHtcclxuICAgIGFueTtcclxuICAgIGxhbmc7XHJcbiAgICBtdXN0RGVzdHJveTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihAT3B0aW9uYWwoKSBwdWJsaWMgX2RhdGVBZGFwdGVyOiBEYXRlQWRhcHRlcjxEPixcclxuICAgICAgICAgICAgICAgIEBPcHRpb25hbCgpIEBJbmplY3QoTUFUX0RBVEVfRk9STUFUUykgcHJpdmF0ZSBfZGF0ZUZvcm1hdHM6IGFueSkge1xyXG4gICAgICAgIGlmICghdGhpcy5fZGF0ZUFkYXB0ZXIpIHtcclxuICAgICAgICAgICAgdGhyb3cgY3JlYXRlTWlzc2luZ0RhdGVJbXBsRXJyb3IoJ0RhdGVBZGFwdGVyJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghdGhpcy5fZGF0ZUZvcm1hdHMpIHtcclxuICAgICAgICAgICAgdGhyb3cgY3JlYXRlTWlzc2luZ0RhdGVJbXBsRXJyb3IoJ01EX0RBVEVfRk9STUFUUycpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmFueSA9IF9kYXRlQWRhcHRlciBhcyBhbnk7XHJcbiAgICAgICAgdGhpcy5tdXN0RGVzdHJveSA9IChfZGF0ZUZvcm1hdHMgYXMgYW55KS5fbGFzdENoYW5nZXMuc3Vic2NyaWJlKCh2KSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMubGFuZyA9IHY7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgbmdPbkRlc3Ryb3koKSB7XHJcbiAgICAgICAgdGhpcy5tdXN0RGVzdHJveS51bnN1YnNjcmliZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIGNoYW5nZSBsb2NhbGUgZnVuY3Rpb24oKVxyXG4gICAgX2NoYW5nZUxvY2FsZSgpIHtcclxuICAgICAgICB0aGlzLmFueS5jaGFuZ2VMb2NhbGUoKTtcclxuICAgIH1cclxuXHJcblxyXG59XHJcbiJdfQ==