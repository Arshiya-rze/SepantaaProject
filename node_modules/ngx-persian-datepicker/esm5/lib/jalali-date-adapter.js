/**
 * @fileoverview added by tsickle
 * Generated from: lib/jalali-date-adapter.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Inject, Optional } from '@angular/core';
import { DateAdapter } from '@angular/material';
import * as jMoment from 'moment-jalaali';
import { MAT_DATE_LOCALE } from './injectors';
/** @type {?} */
var minmin = jMoment;
var JalaliMomentDateAdapter = /** @class */ (function (_super) {
    tslib_1.__extends(JalaliMomentDateAdapter, _super);
    function JalaliMomentDateAdapter(matDateLocale) {
        var _this = _super.call(this) || this;
        _this.setLocale(matDateLocale || minmin.locale('fa'));
        minmin.loadPersian();
        return _this;
    }
    /**
     * @return {?}
     */
    JalaliMomentDateAdapter.prototype.invalid = /**
     * @return {?}
     */
    function () {
        return (/** @type {?} */ ('hi'));
    };
    /**
     * @param {?} date
     * @return {?}
     */
    JalaliMomentDateAdapter.prototype.toIso8601 = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        return 'hi';
    };
    /**
     * returns year in jalali calendar system.
     */
    /**
     * returns year in jalali calendar system.
     * @param {?} date
     * @return {?}
     */
    JalaliMomentDateAdapter.prototype.getYear = /**
     * returns year in jalali calendar system.
     * @param {?} date
     * @return {?}
     */
    function (date) {
        return this.clone(date).jYear();
    };
    /**
     * returns month in jalali calendar system.
     */
    /**
     * returns month in jalali calendar system.
     * @param {?} date
     * @return {?}
     */
    JalaliMomentDateAdapter.prototype.getMonth = /**
     * returns month in jalali calendar system.
     * @param {?} date
     * @return {?}
     */
    function (date) {
        return this.clone(date).jMonth();
    };
    /**
     * returns day in jalali calendar system.
     */
    /**
     * returns day in jalali calendar system.
     * @param {?} date
     * @return {?}
     */
    JalaliMomentDateAdapter.prototype.getDate = /**
     * returns day in jalali calendar system.
     * @param {?} date
     * @return {?}
     */
    function (date) {
        return this.clone(date).jDate();
    };
    /**
     * returns Day Of Week in jalali calendar system.
     */
    /**
     * returns Day Of Week in jalali calendar system.
     * @param {?} date
     * @return {?}
     */
    JalaliMomentDateAdapter.prototype.getDayOfWeek = /**
     * returns Day Of Week in jalali calendar system.
     * @param {?} date
     * @return {?}
     */
    function (date) {
        return this.clone(date).day();
    };
    /**
     * returns Month Names in jalali calendar system.
     * most of the time we use long format. short or narrow format for month names is a little odd.
     */
    /**
     * returns Month Names in jalali calendar system.
     * most of the time we use long format. short or narrow format for month names is a little odd.
     * @param {?} style
     * @return {?}
     */
    JalaliMomentDateAdapter.prototype.getMonthNames = /**
     * returns Month Names in jalali calendar system.
     * most of the time we use long format. short or narrow format for month names is a little odd.
     * @param {?} style
     * @return {?}
     */
    function (style) {
        /** @type {?} */
        var r = [];
        minmin.loadPersian({ dialect: 'persian', usePersianDigits: true });
        /** @type {?} */
        var l = minmin().localeData();
        if (style === 'long' || style === 'short') {
            Object.keys(l).forEach((/**
             * @param {?} key
             * @return {?}
             */
            function (key) {
                if (key === '_jMonths') {
                    /** @type {?} */
                    var values = l[key];
                    for (var index = 0; index < values.length; index++) {
                        r.push(values[index]);
                    }
                }
            }));
        }
        else {
            Object.keys(l).forEach((/**
             * @param {?} key
             * @return {?}
             */
            function (key) {
                if (key === '_jMonthsShort') {
                    /** @type {?} */
                    var values = l[key];
                    for (var index = 0; index < values.length; index++) {
                        r.push(values[index]);
                    }
                }
            }));
        }
        return r;
        // switch (style) {
        //     case 'long':
        //         const mlong = (minmin().localeData() as any)._jMonths.slice(0);
        //         console.log(mlong);
        //         return mlong;
        //     case 'short':
        //         const mshort = (minmin().localeData() as any)._jMonthsShort.slice(0);
        //         console.log('mshort: ', mshort);
        //         return mshort;
        //     case 'narrow':
        //         return (minmin().localeData() as any)._jMonthsShort.slice(0);
        // }
    };
    /**
     * borrowed from angular material code.
     */
    /**
     * borrowed from angular material code.
     * @return {?}
     */
    JalaliMomentDateAdapter.prototype.getDateNames = /**
     * borrowed from angular material code.
     * @return {?}
     */
    function () {
        return this.range(31, (/**
         * @param {?} i
         * @return {?}
         */
        function (i) { return String(i + 1); }));
    };
    /**
     * returns Day Of Week names in jalali calendar system.
     */
    /**
     * returns Day Of Week names in jalali calendar system.
     * @param {?} style
     * @return {?}
     */
    JalaliMomentDateAdapter.prototype.getDayOfWeekNames = /**
     * returns Day Of Week names in jalali calendar system.
     * @param {?} style
     * @return {?}
     */
    function (style) {
        switch (style) {
            case 'long':
                return minmin().localeData().weekdays().slice(0);
            case 'short':
                return minmin().localeData().weekdaysShort().slice(0);
            case 'narrow':
                return minmin().localeData().weekdaysMin().slice(0);
        }
    };
    /**
     * returns year in jalali calendar system.
     */
    /**
     * returns year in jalali calendar system.
     * @param {?} date
     * @return {?}
     */
    JalaliMomentDateAdapter.prototype.getYearName = /**
     * returns year in jalali calendar system.
     * @param {?} date
     * @return {?}
     */
    function (date) {
        return this.clone(date).jYear().toString();
    };
    /**
     * returns first day of week in jalali calendar system.
     * first day of week is saturday, شنبه
     */
    /**
     * returns first day of week in jalali calendar system.
     * first day of week is saturday, شنبه
     * @return {?}
     */
    JalaliMomentDateAdapter.prototype.getFirstDayOfWeek = /**
     * returns first day of week in jalali calendar system.
     * first day of week is saturday, شنبه
     * @return {?}
     */
    function () {
        return 6;
    };
    /**
     * returns Number of Days In Month in jalali calendar system.
     */
    /**
     * returns Number of Days In Month in jalali calendar system.
     * @param {?} date
     * @param {?=} fa
     * @return {?}
     */
    JalaliMomentDateAdapter.prototype.getNumDaysInMonth = /**
     * returns Number of Days In Month in jalali calendar system.
     * @param {?} date
     * @param {?=} fa
     * @return {?}
     */
    function (date, fa) {
        if (date['_d']) {
            return minmin.jDaysInMonth(this.getYear(date['_d']), this.getMonth(date['_d']));
        }
        return minmin.jDaysInMonth(this.getYear(date), this.getMonth(date));
    };
    /**
     * @param {?} date
     * @return {?}
     */
    JalaliMomentDateAdapter.prototype.clone = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        // return date.clone().locale(this.locale);
        return minmin(date);
    };
    /**
     * @param {?} year
     * @param {?} month
     * @param {?} date
     * @return {?}
     */
    JalaliMomentDateAdapter.prototype.createDate = /**
     * @param {?} year
     * @param {?} month
     * @param {?} date
     * @return {?}
     */
    function (year, month, date) {
        return minmin().jYear(year).jMonth(month).jDate(date);
    };
    /**
     * @return {?}
     */
    JalaliMomentDateAdapter.prototype.today = /**
     * @return {?}
     */
    function () {
        return minmin();
    };
    /**
     * @param {?} value
     * @param {?} parseFormat
     * @return {?}
     */
    JalaliMomentDateAdapter.prototype.parse = /**
     * @param {?} value
     * @param {?} parseFormat
     * @return {?}
     */
    function (value, parseFormat) {
        if (value && typeof value === 'string') {
            return minmin(value, parseFormat, this.locale);
        }
        return value ? minmin(value).locale(this.locale) : null;
    };
    /**
     * @param {?} date
     * @param {?} displayFormat
     * @return {?}
     */
    JalaliMomentDateAdapter.prototype.format = /**
     * @param {?} date
     * @param {?} displayFormat
     * @return {?}
     */
    function (date, displayFormat) {
        return this.clone(date).format(displayFormat);
    };
    /**
     * @param {?} date
     * @param {?} years
     * @return {?}
     */
    JalaliMomentDateAdapter.prototype.addCalendarYears = /**
     * @param {?} date
     * @param {?} years
     * @return {?}
     */
    function (date, years) {
        return this.clone(date).add(years, 'jYear');
    };
    /**
     * @param {?} date
     * @param {?} months
     * @return {?}
     */
    JalaliMomentDateAdapter.prototype.addCalendarMonths = /**
     * @param {?} date
     * @param {?} months
     * @return {?}
     */
    function (date, months) {
        return this.clone(date).add((/** @type {?} */ (months)), 'jmonth');
    };
    /**
     * @param {?} date
     * @param {?} days
     * @return {?}
     */
    JalaliMomentDateAdapter.prototype.addCalendarDays = /**
     * @param {?} date
     * @param {?} days
     * @return {?}
     */
    function (date, days) {
        return this.clone(date).add(days, 'day');
    };
    /**
     * @param {?} date
     * @return {?}
     */
    JalaliMomentDateAdapter.prototype.getISODateString = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        return this.clone(date).format('jYYYY-jMM-jDD');
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    JalaliMomentDateAdapter.prototype.isDateInstance = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        return minmin.isMoment(obj);
    };
    /**
     * @param {?} date
     * @return {?}
     */
    JalaliMomentDateAdapter.prototype.isValid = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        return this.clone(date).isValid();
    };
    /**
     * @template T
     * @param {?} length
     * @param {?} valueFunction
     * @return {?}
     */
    JalaliMomentDateAdapter.prototype.range = /**
     * @template T
     * @param {?} length
     * @param {?} valueFunction
     * @return {?}
     */
    function (length, valueFunction) {
        /** @type {?} */
        var valuesArray = Array(length);
        for (var i = 0; i < length; i++) {
            valuesArray[i] = valueFunction(i);
        }
        return valuesArray;
    };
    /** @nocollapse */
    JalaliMomentDateAdapter.ctorParameters = function () { return [
        { type: String, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DATE_LOCALE,] }] }
    ]; };
    return JalaliMomentDateAdapter;
}(DateAdapter));
export { JalaliMomentDateAdapter };
//# sourceMappingURL=data:application/json;base64,