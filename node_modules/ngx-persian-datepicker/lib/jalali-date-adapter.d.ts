import { DateAdapter } from '@angular/material';
import * as jMoment from 'moment-jalaali';
export declare class JalaliMomentDateAdapter extends DateAdapter<jMoment.Moment> {
    constructor(matDateLocale: string);
    invalid(): any;
    toIso8601(date: any): string;
    /**
     * returns year in jalali calendar system.
     */
    getYear(date: jMoment.Moment): number;
    /**
     * returns month in jalali calendar system.
     */
    getMonth(date: jMoment.Moment): number;
    /**
     * returns day in jalali calendar system.
     */
    getDate(date: jMoment.Moment): number;
    /**
     * returns Day Of Week in jalali calendar system.
     */
    getDayOfWeek(date: jMoment.Moment): number;
    /**
     * returns Month Names in jalali calendar system.
     * most of the time we use long format. short or narrow format for month names is a little odd.
     */
    getMonthNames(style: 'long' | 'short' | 'narrow'): string[];
    /**
     * borrowed from angular material code.
     */
    getDateNames(): string[];
    /**
     * returns Day Of Week names in jalali calendar system.
     */
    getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];
    /**
     * returns year in jalali calendar system.
     */
    getYearName(date: jMoment.Moment): string;
    /**
     * returns first day of week in jalali calendar system.
     * first day of week is saturday, شنبه
     */
    getFirstDayOfWeek(): number;
    /**
     * returns Number of Days In Month in jalali calendar system.
     */
    getNumDaysInMonth(date: jMoment.Moment, fa?: any): number;
    clone(date: jMoment.Moment): jMoment.Moment;
    createDate(year: number, month: number, date: number): jMoment.Moment;
    today(): jMoment.Moment;
    parse(value: any, parseFormat: string | string[]): jMoment.Moment | null;
    format(date: jMoment.Moment, displayFormat: any): string;
    addCalendarYears(date: jMoment.Moment, years: number): jMoment.Moment;
    addCalendarMonths(date: jMoment.Moment, months: number): jMoment.Moment;
    addCalendarDays(date: jMoment.Moment, days: number): jMoment.Moment;
    getISODateString(date: jMoment.Moment): string;
    isDateInstance(obj: any): boolean;
    isValid(date: jMoment.Moment): boolean;
    range<T>(length: number, valueFunction: (index: number) => T): T[];
}
