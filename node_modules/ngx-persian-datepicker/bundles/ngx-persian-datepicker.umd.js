(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/material'), require('@angular/common'), require('@angular/cdk/overlay'), require('@angular/cdk/a11y'), require('@angular/cdk/coercion'), require('@angular/cdk/portal'), require('@angular/cdk/bidi'), require('@angular/cdk/keycodes'), require('rxjs'), require('rxjs/operators'), require('@angular/forms'), require('moment-jalaali')) :
    typeof define === 'function' && define.amd ? define('ngx-persian-datepicker', ['exports', '@angular/core', '@angular/material', '@angular/common', '@angular/cdk/overlay', '@angular/cdk/a11y', '@angular/cdk/coercion', '@angular/cdk/portal', '@angular/cdk/bidi', '@angular/cdk/keycodes', 'rxjs', 'rxjs/operators', '@angular/forms', 'moment-jalaali'], factory) :
    (global = global || self, factory(global['ngx-persian-datepicker'] = {}, global.ng.core, global.ng.material, global.ng.common, global.ng.cdk.overlay, global.ng.cdk.a11y, global.ng.cdk.coercion, global.ng.cdk.portal, global.ng.cdk.bidi, global.ng.cdk.keycodes, global.rxjs, global.rxjs.operators, global.ng.forms, global.jMoment));
}(this, (function (exports, core, material, common, overlay, a11y, coercion, portal, bidi, keycodes, rxjs, operators, forms, jMoment) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __exportStar(m, exports) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }

    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m) return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    };

    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }

    function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    };

    function __importStar(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result.default = mod;
        return result;
    }

    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/calendar-body.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * An internal class that represents the data corresponding to a single calendar cell.
     * \@docs-private
     */
    var   /**
     * An internal class that represents the data corresponding to a single calendar cell.
     * \@docs-private
     */
    MdCalendarCell = /** @class */ (function () {
        function MdCalendarCell(value, displayValue, ariaLabel, enabled, other) {
            this.value = value;
            this.displayValue = displayValue;
            this.ariaLabel = ariaLabel;
            this.enabled = enabled;
            this.other = other;
        }
        return MdCalendarCell;
    }());
    if (false) {
        /** @type {?} */
        MdCalendarCell.prototype.value;
        /** @type {?} */
        MdCalendarCell.prototype.displayValue;
        /** @type {?} */
        MdCalendarCell.prototype.ariaLabel;
        /** @type {?} */
        MdCalendarCell.prototype.enabled;
        /** @type {?} */
        MdCalendarCell.prototype.other;
    }
    /**
     * An internal component used to display calendar data in a table.
     * \@docs-private
     */
    var MdCalendarBody = /** @class */ (function () {
        function MdCalendarBody() {
            /**
             * The number of columns in the table.
             */
            this.numCols = 7;
            /**
             * Whether to allow selection of disabled cells.
             */
            this.allowDisabledSelection = false;
            /**
             * The cell number of the active cell in the table.
             */
            this.activeCell = 0;
            /**
             * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be
             * maintained even as the table resizes.
             */
            this.cellAspectRatio = 1;
            /**
             * Emits when a new value is selected.
             */
            this.selectedValueChange = new core.EventEmitter();
        }
        /**
         * @param {?} cell
         * @return {?}
         */
        MdCalendarBody.prototype._cellClicked = /**
         * @param {?} cell
         * @return {?}
         */
        function (cell) {
            if (!this.allowDisabledSelection && !cell.enabled) {
                return;
            }
            this.selectedValueChange.emit(cell.value);
        };
        Object.defineProperty(MdCalendarBody.prototype, "_firstRowOffset", {
            /** The number of blank cells to put at the beginning for the first row. */
            get: /**
             * The number of blank cells to put at the beginning for the first row.
             * @return {?}
             */
            function () {
                return this.rows && this.rows.length && this.rows[0].length ? this.numCols - this.rows[0].length : 0;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} rowIndex
         * @param {?} colIndex
         * @return {?}
         */
        MdCalendarBody.prototype._isActiveCell = /**
         * @param {?} rowIndex
         * @param {?} colIndex
         * @return {?}
         */
        function (rowIndex, colIndex) {
            /** @type {?} */
            var cellNumber = rowIndex * this.numCols + colIndex;
            // Account for the fact that the first row may not have as many cells.
            if (rowIndex) {
                cellNumber -= this._firstRowOffset;
            }
            return cellNumber == this.activeCell;
        };
        MdCalendarBody.decorators = [
            { type: core.Component, args: [{
                        moduleId: module.id,
                        selector: '[md-calendar-body], [mat-calendar-body]',
                        template: "<!--\r\n  If there's not enough space in the first row, create a separate label row. We mark this row as\r\n  aria-hidden because we don't want it to be read out as one of the weeks in the month.\r\n-->\r\n<!--<tr *ngIf=\"_firstRowOffset < labelMinRequiredCells\" aria-hidden=\"true\">-->\r\n  <!--<td class=\"mat-calendar-body-label\"-->\r\n      <!--[attr.colspan]=\"numCols\"-->\r\n      <!--[style.paddingTop.%]=\"50 * cellAspectRatio / numCols\"-->\r\n      <!--[style.paddingBottom.%]=\"50 * cellAspectRatio / numCols\">-->\r\n    <!--{{label}}-->\r\n  <!--</td>-->\r\n<!--</tr>-->\r\n\r\n<!-- Create the first row separately so we can include a special spacer cell. -->\r\n<tr *ngFor=\"let row of rows; let rowIndex = index\" role=\"row\">\r\n  <!--\r\n    We mark this cell as aria-hidden so it doesn't get read out as one of the days in the week.\r\n    The aspect ratio of the table cells is maintained by setting the top and bottom padding as a\r\n    percentage of the width (a variant of the trick described here:\r\n    https://www.w3schools.com/howto/howto_css_aspect_ratio.asp).\r\n  -->\r\n  <td *ngIf=\"rowIndex === 0 && _firstRowOffset\"\r\n      aria-hidden=\"true\"\r\n      class=\"mat-calendar-body-label\"\r\n      [attr.colspan]=\"_firstRowOffset\"\r\n      [style.paddingTop.%]=\"50 * cellAspectRatio / numCols\"\r\n      [style.paddingBottom.%]=\"50 * cellAspectRatio / numCols\">\r\n    <!--{{_firstRowOffset >= labelMinRequiredCells ? label : ''}}-->\r\n  </td>\r\n  <td *ngFor=\"let item of row; let colIndex = index\"\r\n      role=\"gridcell\"\r\n      class=\"mat-calendar-body-cell\"\r\n      [tabindex]=\"_isActiveCell(rowIndex, colIndex) ? 0 : -1\"\r\n      [class.mat-calendar-body-disabled]=\"!item.enabled\"\r\n      [class.mat-calendar-body-active]=\"_isActiveCell(rowIndex, colIndex)\"\r\n      [attr.aria-label]=\"item.ariaLabel\"\r\n      [attr.aria-disabled]=\"!item.enabled || null\"\r\n      (click)=\"_cellClicked(item)\"\r\n      [style.width.%]=\"100 / numCols\"\r\n      [style.paddingTop.%]=\"50 * cellAspectRatio / numCols\"\r\n      [style.paddingBottom.%]=\"50 * cellAspectRatio / numCols\">\r\n    <div class=\"mat-calendar-body-cell-content\"\r\n         [class.mat-calendar-body-selected]=\"selectedValue === item.value\"\r\n         [class.subed]=\"subedValue === item.value\"\r\n         [class.mat-calendar-body-today]=\"todayValue === item.value\">\r\n      {{item.displayValue}}\r\n        <div class=\"superSmall mdc-theme--primary-light\">\r\n            {{item?.other}}\r\n        </div>\r\n    </div>\r\n  </td>\r\n</tr>\r\n",
                        host: {
                            'class': 'mat-calendar-body',
                        },
                        encapsulation: core.ViewEncapsulation.None,
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        styles: [".mat-calendar-body{min-width:224px;font-size:14px}.superSmall{position:absolute;bottom:3px;left:0;width:100%;text-align:center;color:#d6ac97;font-size:12px}.wide-calendar{width:592px;height:auto}.wide-calendar .mat-calendar-content{display:flex}.wide-calendar .mat-calendar-content md-year-view{max-width:300px;margin:0 auto;width:100%}.wide-calendar .mat-calendar-content md-month-view.ng-star-inserted:first-child:after{content:\"\";background:#bbb;position:absolute;left:-10px;height:calc(97% - 20px);top:20px;width:1px}.wide-calendar .mat-calendar-content md-month-view{position:relative;width:50%;margin:0 10px}.wide-calendar .mat-calendar-content md-month-view .mat-calendar-table thead th:after{left:0;right:0}.mat-calendar-body-label{height:0;line-height:0;text-align:left;padding-left:4.7142857143%;padding-right:4.7142857143%}.mat-calendar-body-cell{position:relative;height:0;line-height:0;text-align:center;outline:0;cursor:pointer}.mat-calendar-body-disabled{cursor:default}.mat-calendar-body-cell-content{padding-bottom:5px;position:absolute;top:5%;left:5%;display:flex;align-items:center;justify-content:center;box-sizing:border-box;width:90%;height:90%;line-height:11px;border-width:1px;border-style:solid;border-radius:999px}[dir=rtl] .mat-calendar-body-label{text-align:right}"]
                    }] }
        ];
        MdCalendarBody.propDecorators = {
            label: [{ type: core.Input }],
            rows: [{ type: core.Input }],
            todayValue: [{ type: core.Input }],
            selectedValue: [{ type: core.Input }],
            subedValue: [{ type: core.Input }],
            labelMinRequiredCells: [{ type: core.Input }],
            numCols: [{ type: core.Input }],
            allowDisabledSelection: [{ type: core.Input }],
            activeCell: [{ type: core.Input }],
            cellAspectRatio: [{ type: core.Input }],
            selectedValueChange: [{ type: core.Output }]
        };
        return MdCalendarBody;
    }());
    if (false) {
        /**
         * The label for the table. (e.g. "Jan 2017").
         * @type {?}
         */
        MdCalendarBody.prototype.label;
        /**
         * The cells to display in the table.
         * @type {?}
         */
        MdCalendarBody.prototype.rows;
        /**
         * The value in the table that corresponds to today.
         * @type {?}
         */
        MdCalendarBody.prototype.todayValue;
        /**
         * The value in the table that is currently selected.
         * @type {?}
         */
        MdCalendarBody.prototype.selectedValue;
        /** @type {?} */
        MdCalendarBody.prototype.subedValue;
        /**
         * The minimum number of free cells needed to fit the label in the first row.
         * @type {?}
         */
        MdCalendarBody.prototype.labelMinRequiredCells;
        /**
         * The number of columns in the table.
         * @type {?}
         */
        MdCalendarBody.prototype.numCols;
        /**
         * Whether to allow selection of disabled cells.
         * @type {?}
         */
        MdCalendarBody.prototype.allowDisabledSelection;
        /**
         * The cell number of the active cell in the table.
         * @type {?}
         */
        MdCalendarBody.prototype.activeCell;
        /**
         * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be
         * maintained even as the table resizes.
         * @type {?}
         */
        MdCalendarBody.prototype.cellAspectRatio;
        /**
         * Emits when a new value is selected.
         * @type {?}
         */
        MdCalendarBody.prototype.selectedValueChange;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/datepicker-errors.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * \@docs-private
     * @param {?} provider
     * @return {?}
     */
    function createMissingDateImplError(provider) {
        return Error("MdDatepicker: No provider found for " + provider + ". You must import one of the following " +
            "modules at your application root: MdNativeDateModule, or provide a custom implementation.");
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/month-view.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var DAYS_PER_WEEK = 7;
    /**
     * An internal component used to display a single month in the datepicker.
     * \@docs-private
     * @template D
     */
    var MdMonthView = /** @class */ (function () {
        function MdMonthView(_dateAdapter, _dateFormats, ref) {
            var _this = this;
            this._dateAdapter = _dateAdapter;
            this._dateFormats = _dateFormats;
            /**
             * Emits when a new date is selected.
             */
            this.selectedChange = new core.EventEmitter();
            /**
             * Emits when any date is selected.
             */
            this.userSelection = new core.EventEmitter();
            if (!this._dateAdapter) {
                throw createMissingDateImplError('DateAdapter');
            }
            if (!this._dateFormats) {
                throw createMissingDateImplError('MD_DATE_FORMATS');
            }
            this._activeDate = this._dateAdapter.today();
            /** @type {?} */
            var any = (/** @type {?} */ (_dateFormats));
            this.mustDestroy = any.getChanges().subscribe((/**
             * @param {?} v
             * @return {?}
             */
            function (v) {
                _this._init();
                ref.detectChanges();
            }), (/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
            }), (/**
             * @return {?}
             */
            function () {
            }));
            this.mustDestroy2 = any._lastChanges.subscribe((/**
             * @param {?} v
             * @return {?}
             */
            function (v) {
                _this.lang = v;
            }));
        }
        Object.defineProperty(MdMonthView.prototype, "activeDate", {
            /**
             * The date to display in this month view (everything other than the month and year is ignored).
             */
            get: /**
             * The date to display in this month view (everything other than the month and year is ignored).
             * @return {?}
             */
            function () {
                return this._activeDate;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                /** @type {?} */
                var oldActiveDate = this._activeDate;
                this._activeDate = value || this._dateAdapter.today();
                if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {
                    this._init();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MdMonthView.prototype, "selected", {
            /** The currently selected date. */
            get: /**
             * The currently selected date.
             * @return {?}
             */
            function () {
                return this._selected;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._selected = value;
                this._selectedDate = this._getDateInCurrentMonth(this.selected);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MdMonthView.prototype, "subedDate", {
            get: /**
             * @return {?}
             */
            function () {
                return this._subed;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._subed = value;
                this._subedDate = this._getDateInCurrentMonth(this.subedDate);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        MdMonthView.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            this.mustDestroy.unsubscribe();
            this.mustDestroy2.unsubscribe();
        };
        /**
         * @return {?}
         */
        MdMonthView.prototype.ngAfterContentInit = /**
         * @return {?}
         */
        function () {
            this._init();
        };
        /** Handles when a new date is selected. */
        /**
         * Handles when a new date is selected.
         * @param {?} date
         * @return {?}
         */
        MdMonthView.prototype._dateSelected = /**
         * Handles when a new date is selected.
         * @param {?} date
         * @return {?}
         */
        function (date) {
            /** @type {?} */
            var selectedYear = this._dateAdapter.getYear(this.activeDate);
            /** @type {?} */
            var selectedMonth = this._dateAdapter.getMonth(this.activeDate);
            /** @type {?} */
            var selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);
            this.selectedChange.emit(selectedDate);
            this.userSelection.emit();
        };
        /** Initializes this month view. */
        /**
         * Initializes this month view.
         * @private
         * @return {?}
         */
        MdMonthView.prototype._init = /**
         * Initializes this month view.
         * @private
         * @return {?}
         */
        function () {
            /** @type {?} */
            var firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();
            /** @type {?} */
            var narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');
            /** @type {?} */
            var longWeekdays = this._dateAdapter.getDayOfWeekNames('long');
            // Rotate the labels for days of the week based on the configured first day of the week.
            /** @type {?} */
            var weekdays = longWeekdays.map((/**
             * @param {?} long
             * @param {?} i
             * @return {?}
             */
            function (long, i) {
                return { long: long, narrow: narrowWeekdays[i] };
            }));
            this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));
            this._selectedDate = this._getDateInCurrentMonth(this.selected);
            this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());
            this._yearNumber = this._dateAdapter.getYear(this.activeDate);
            this._monthLabel =
                this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]
                    .toLocaleUpperCase();
            /** @type {?} */
            var firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), this._dateAdapter.getMonth(this.activeDate), 1);
            this._firstWeekOffset =
                (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -
                    this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;
            this._createWeekCells();
        };
        /** Creates MdCalendarCells for the dates in this month. */
        /**
         * Creates MdCalendarCells for the dates in this month.
         * @private
         * @return {?}
         */
        MdMonthView.prototype._createWeekCells = /**
         * Creates MdCalendarCells for the dates in this month.
         * @private
         * @return {?}
         */
        function () {
            /** @type {?} */
            var daysInMonthFa;
            /** @type {?} */
            var dateNamesFa;
            /** @type {?} */
            var daysInMonth = this._dateAdapter.getNumDaysInMonth(this._activeDate);
            /** @type {?} */
            var dateNames = this._dateAdapter.getDateNames();
            if (((/** @type {?} */ (this._dateAdapter))).JDateAdapter) {
                /** @type {?} */
                var JAdapter = ((/** @type {?} */ (this._dateAdapter))).JDateAdapter;
                daysInMonthFa = JAdapter.getNumDaysInMonth(this._activeDate);
                dateNamesFa = JAdapter.getDateNames();
            }
            this._weeks = [[]];
            for (var i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {
                /** @type {?} */
                var ariaLabelFa = void 0;
                /** @type {?} */
                var dateFa = void 0;
                /** @type {?} */
                var dateEn = void 0;
                if (cell == DAYS_PER_WEEK) {
                    this._weeks.push([]);
                    cell = 0;
                }
                /** @type {?} */
                var date = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), this._dateAdapter.getMonth(this.activeDate), i + 1);
                /** @type {?} */
                var enabled = !this.dateFilter ||
                    this.dateFilter(date);
                if (((/** @type {?} */ (this._dateAdapter))).JDateAdapter) {
                    /** @type {?} */
                    var JAdapter = ((/** @type {?} */ (this._dateAdapter))).JDateAdapter;
                    dateFa = JAdapter.getDate(date);
                    dateEn = ((/** @type {?} */ (this._dateAdapter.getDate)))(date, true);
                    // ariaLabelFa = JAdapter.format(dateFa, '');
                }
                /** @type {?} */
                var ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);
                if (this.lang == 'en') {
                    this._weeks[this._weeks.length - 1]
                        .push(new MdCalendarCell(i + 1, dateNames[i], ariaLabel, enabled, dateFa));
                }
                else {
                    this._weeks[this._weeks.length - 1]
                        .push(new MdCalendarCell(i + 1, dateNames[i], ariaLabel, enabled, dateEn));
                }
            }
        };
        /**
         * Gets the date in this month that the given Date falls on.
         * Returns null if the given Date is in another month.
         */
        /**
         * Gets the date in this month that the given Date falls on.
         * Returns null if the given Date is in another month.
         * @private
         * @param {?} date
         * @return {?}
         */
        MdMonthView.prototype._getDateInCurrentMonth = /**
         * Gets the date in this month that the given Date falls on.
         * Returns null if the given Date is in another month.
         * @private
         * @param {?} date
         * @return {?}
         */
        function (date) {
            return this._hasSameMonthAndYear(date, this.activeDate) ?
                this._dateAdapter.getDate(date) : null;
        };
        /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */
        /**
         * Checks whether the 2 dates are non-null and fall within the same month of the same year.
         * @private
         * @param {?} d1
         * @param {?} d2
         * @return {?}
         */
        MdMonthView.prototype._hasSameMonthAndYear = /**
         * Checks whether the 2 dates are non-null and fall within the same month of the same year.
         * @private
         * @param {?} d1
         * @param {?} d2
         * @return {?}
         */
        function (d1, d2) {
            return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&
                this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));
        };
        MdMonthView.decorators = [
            { type: core.Component, args: [{
                        moduleId: module.id,
                        selector: 'md-month-view',
                        template: "<div class=\"mlabel\">{{_monthLabel}}<span>{{_yearNumber}}</span></div>\r\n<table class=\"mat-calendar-table\">\r\n  <thead class=\"mat-calendar-table-header\">\r\n    <tr><th *ngFor=\"let day of this?._weekdays\" [attr.aria-label]=\"day.long\">{{day.narrow}}</th></tr>\r\n    <tr><th class=\"mat-calendar-table-header-divider\" colspan=\"7\" aria-hidden=\"true\"></th></tr>\r\n  </thead>\r\n  <tbody md-calendar-body\r\n         role=\"grid\"\r\n         [label]=\"_monthLabel\"\r\n         [rows]=\"_weeks\"\r\n         [todayValue]=\"_todayDate\"\r\n         [selectedValue]=\"_selectedDate\"\r\n         [labelMinRequiredCells]=\"3\"\r\n         [activeCell]=\"_dateAdapter.getDate(activeDate) - 1\"\r\n         [subedValue]=\"_subedDate\"\r\n         (selectedValueChange)=\"_dateSelected($event)\">\r\n  </tbody>\r\n</table>\r\n",
                        encapsulation: core.ViewEncapsulation.None,
                        changeDetection: core.ChangeDetectionStrategy.OnPush
                    }] }
        ];
        /** @nocollapse */
        MdMonthView.ctorParameters = function () { return [
            { type: material.DateAdapter, decorators: [{ type: core.Optional }] },
            { type: undefined, decorators: [{ type: core.Optional }, { type: core.Inject, args: [material.MAT_DATE_FORMATS,] }] },
            { type: core.ChangeDetectorRef }
        ]; };
        MdMonthView.propDecorators = {
            activeDate: [{ type: core.Input }],
            selected: [{ type: core.Input }],
            subedDate: [{ type: core.Input }],
            dateFilter: [{ type: core.Input }],
            selectedChange: [{ type: core.Output }],
            userSelection: [{ type: core.Output }]
        };
        return MdMonthView;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        MdMonthView.prototype._activeDate;
        /**
         * @type {?}
         * @private
         */
        MdMonthView.prototype._selected;
        /**
         * @type {?}
         * @private
         */
        MdMonthView.prototype._subed;
        /**
         * A function used to filter which dates are selectable.
         * @type {?}
         */
        MdMonthView.prototype.dateFilter;
        /**
         * Emits when a new date is selected.
         * @type {?}
         */
        MdMonthView.prototype.selectedChange;
        /**
         * Emits when any date is selected.
         * @type {?}
         */
        MdMonthView.prototype.userSelection;
        /**
         * The label for this month (e.g. "January 2017").
         * @type {?}
         */
        MdMonthView.prototype._monthLabel;
        /** @type {?} */
        MdMonthView.prototype._yearNumber;
        /**
         * Grid of calendar cells representing the dates of the month.
         * @type {?}
         */
        MdMonthView.prototype._weeks;
        /**
         * The number of blank cells in the first row before the 1st of the month.
         * @type {?}
         */
        MdMonthView.prototype._firstWeekOffset;
        /**
         * The date of the month that the currently selected Date falls on.
         * Null if the currently selected Date is in another month.
         * @type {?}
         */
        MdMonthView.prototype._selectedDate;
        /** @type {?} */
        MdMonthView.prototype._subedDate;
        /** @type {?} */
        MdMonthView.prototype.mustDestroy;
        /** @type {?} */
        MdMonthView.prototype.mustDestroy2;
        /**
         * The date of the month that today falls on. Null if today is in another month.
         * @type {?}
         */
        MdMonthView.prototype._todayDate;
        /**
         * The names of the weekdays.
         * @type {?}
         */
        MdMonthView.prototype._weekdays;
        /** @type {?} */
        MdMonthView.prototype.lang;
        /** @type {?} */
        MdMonthView.prototype._dateAdapter;
        /**
         * @type {?}
         * @private
         */
        MdMonthView.prototype._dateFormats;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/year-view.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * An internal component used to display a single year in the datepicker.
     * \@docs-private
     * @template D
     */
    var MdYearView = /** @class */ (function () {
        function MdYearView(_dateAdapter, _dateFormats, ref) {
            var _this = this;
            this._dateAdapter = _dateAdapter;
            this._dateFormats = _dateFormats;
            /**
             * Emits when a new month is selected.
             */
            this.selectedChange = new core.EventEmitter();
            if (!this._dateAdapter) {
                throw createMissingDateImplError('DateAdapter');
            }
            if (!this._dateFormats) {
                throw createMissingDateImplError('MD_DATE_FORMATS');
            }
            this.mustDestroy = this._dateFormats._getChanges.subscribe((/**
             * @param {?} v
             * @return {?}
             */
            function (v) {
                _this._init();
                ref.detectChanges();
            }));
            this._activeDate = this._dateAdapter.today();
        }
        Object.defineProperty(MdYearView.prototype, "activeDate", {
            /** The date to display in this year view (everything other than the year is ignored). */
            get: /**
             * The date to display in this year view (everything other than the year is ignored).
             * @return {?}
             */
            function () {
                return this._activeDate;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                /** @type {?} */
                var oldActiveDate = this._activeDate;
                this._activeDate = value || this._dateAdapter.today();
                if (this._dateAdapter.getYear(oldActiveDate) != this._dateAdapter.getYear(this._activeDate)) {
                    this._init();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MdYearView.prototype, "selected", {
            /** The currently selected date. */
            get: /**
             * The currently selected date.
             * @return {?}
             */
            function () {
                return this._selected;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._selected = value;
                this._selectedMonth = this._getMonthInCurrentYear(this.selected);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        MdYearView.prototype.ngAfterContentInit = /**
         * @return {?}
         */
        function () {
            this._init();
        };
        /**
         * @return {?}
         */
        MdYearView.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            this.mustDestroy.unsubscribe();
        };
        /** Handles when a new month is selected. */
        /**
         * Handles when a new month is selected.
         * @param {?} month
         * @return {?}
         */
        MdYearView.prototype._monthSelected = /**
         * Handles when a new month is selected.
         * @param {?} month
         * @return {?}
         */
        function (month) {
            /** @type {?} */
            var daysInMonth = this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1));
            this.selectedChange.emit(this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));
        };
        /** Initializes this month view. */
        /**
         * Initializes this month view.
         * @private
         * @return {?}
         */
        MdYearView.prototype._init = /**
         * Initializes this month view.
         * @private
         * @return {?}
         */
        function () {
            var _this = this;
            this._selectedMonth = this._getMonthInCurrentYear(this.selected);
            this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());
            this._yearLabel = this._dateAdapter.getYearName(this.activeDate);
            /** @type {?} */
            var monthNames = this._dateAdapter.getMonthNames('short');
            // First row of months only contains 5 elements so we can fit the year label on the same row.
            this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map((/**
             * @param {?} row
             * @return {?}
             */
            function (row) { return row.map((/**
             * @param {?} month
             * @return {?}
             */
            function (month) { return _this._createCellForMonth(month, monthNames[month]); })); }));
        };
        /**
         * Gets the month in this year that the given Date falls on.
         * Returns null if the given Date is in another year.
         */
        /**
         * Gets the month in this year that the given Date falls on.
         * Returns null if the given Date is in another year.
         * @private
         * @param {?} date
         * @return {?}
         */
        MdYearView.prototype._getMonthInCurrentYear = /**
         * Gets the month in this year that the given Date falls on.
         * Returns null if the given Date is in another year.
         * @private
         * @param {?} date
         * @return {?}
         */
        function (date) {
            return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?
                this._dateAdapter.getMonth(date) : null;
        };
        /** Creates an MdCalendarCell for the given month. */
        /**
         * Creates an MdCalendarCell for the given month.
         * @private
         * @param {?} month
         * @param {?} monthName
         * @return {?}
         */
        MdYearView.prototype._createCellForMonth = /**
         * Creates an MdCalendarCell for the given month.
         * @private
         * @param {?} month
         * @param {?} monthName
         * @return {?}
         */
        function (month, monthName) {
            /** @type {?} */
            var ariaLabel = this._dateAdapter.format(this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1), this._dateFormats.display.monthYearA11yLabel);
            return new MdCalendarCell(month, monthName.toLocaleUpperCase(), ariaLabel, this._isMonthEnabled(month), null);
        };
        /** Whether the given month is enabled. */
        /**
         * Whether the given month is enabled.
         * @private
         * @param {?} month
         * @return {?}
         */
        MdYearView.prototype._isMonthEnabled = /**
         * Whether the given month is enabled.
         * @private
         * @param {?} month
         * @return {?}
         */
        function (month) {
            if (!this.dateFilter) {
                return true;
            }
            /** @type {?} */
            var firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);
            // If any date in the month is enabled count the month as enabled.
            for (var date = firstOfMonth; this._dateAdapter.getMonth(date) == month; date = this._dateAdapter.addCalendarDays(date, 1)) {
                if (this.dateFilter(date)) {
                    return true;
                }
            }
            return false;
        };
        MdYearView.decorators = [
            { type: core.Component, args: [{
                        moduleId: module.id,
                        selector: 'md-year-view, mat-year-view',
                        template: "<table class=\"mat-calendar-table\">\r\n  <thead class=\"mat-calendar-table-header\">\r\n    <tr><th class=\"mat-calendar-table-header-divider\" colspan=\"4\"></th></tr>\r\n  </thead>\r\n  <tbody md-calendar-body\r\n         role=\"grid\"\r\n         allowDisabledSelection=\"true\"\r\n         [label]=\"_yearLabel\"\r\n         [rows]=\"_months\"\r\n         [todayValue]=\"_todayMonth\"\r\n         [selectedValue]=\"_selectedMonth\"\r\n         [labelMinRequiredCells]=\"2\"\r\n         [numCols]=\"4\"\r\n         [cellAspectRatio]=\"4 / 7\"\r\n         [activeCell]=\"_dateAdapter.getMonth(activeDate)\"\r\n         (selectedValueChange)=\"_monthSelected($event)\">\r\n  </tbody>\r\n</table>\r\n",
                        encapsulation: core.ViewEncapsulation.None,
                        changeDetection: core.ChangeDetectionStrategy.OnPush
                    }] }
        ];
        /** @nocollapse */
        MdYearView.ctorParameters = function () { return [
            { type: material.DateAdapter, decorators: [{ type: core.Optional }] },
            { type: undefined, decorators: [{ type: core.Optional }, { type: core.Inject, args: [material.MAT_DATE_FORMATS,] }] },
            { type: core.ChangeDetectorRef }
        ]; };
        MdYearView.propDecorators = {
            activeDate: [{ type: core.Input }],
            selected: [{ type: core.Input }],
            dateFilter: [{ type: core.Input }],
            selectedChange: [{ type: core.Output }]
        };
        return MdYearView;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        MdYearView.prototype._activeDate;
        /**
         * @type {?}
         * @private
         */
        MdYearView.prototype._selected;
        /**
         * A function used to filter which dates are selectable.
         * @type {?}
         */
        MdYearView.prototype.dateFilter;
        /**
         * Emits when a new month is selected.
         * @type {?}
         */
        MdYearView.prototype.selectedChange;
        /**
         * Grid of calendar cells representing the months of the year.
         * @type {?}
         */
        MdYearView.prototype._months;
        /**
         * The label for this year (e.g. "2017").
         * @type {?}
         */
        MdYearView.prototype._yearLabel;
        /**
         * The month in this year that today falls on. Null if today is in a different year.
         * @type {?}
         */
        MdYearView.prototype._todayMonth;
        /**
         * The month in this year that the selected Date falls on.
         * Null if the selected Date is in a different year.
         * @type {?}
         */
        MdYearView.prototype._selectedMonth;
        /** @type {?} */
        MdYearView.prototype.mustDestroy;
        /** @type {?} */
        MdYearView.prototype._dateAdapter;
        /**
         * @type {?}
         * @private
         */
        MdYearView.prototype._dateFormats;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/datepicker-intl.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Datepicker data that requires internationalization.
     */
    var MdDatepickerIntl = /** @class */ (function () {
        function MdDatepickerIntl() {
            /**
             * Stream that emits whenever the labels here are changed. Use this to notify
             * components if the labels have changed after initialization.
             */
            this.changes = new rxjs.Subject();
            /**
             * A label for the calendar popup (used by screen readers).
             */
            this.calendarLabel = 'Calendar';
            /**
             * A label for the button used to open the calendar popup (used by screen readers).
             */
            this.openCalendarLabel = 'Open calendar';
            /**
             * A label for the previous month button (used by screen readers).
             */
            this.prevMonthLabel = 'Previous month';
            /**
             * A label for the next month button (used by screen readers).
             */
            this.nextMonthLabel = 'Next month';
            /**
             * A label for the previous year button (used by screen readers).
             */
            this.prevYearLabel = 'Previous year';
            /**
             * A label for the next year button (used by screen readers).
             */
            this.nextYearLabel = 'Next year';
            /**
             * A label for the 'switch to month view' button (used by screen readers).
             */
            this.switchToMonthViewLabel = 'Change to month view';
            /**
             * A label for the 'switch to year view' button (used by screen readers).
             */
            this.switchToYearViewLabel = 'Change to year view';
        }
        MdDatepickerIntl.decorators = [
            { type: core.Injectable }
        ];
        return MdDatepickerIntl;
    }());
    if (false) {
        /**
         * Stream that emits whenever the labels here are changed. Use this to notify
         * components if the labels have changed after initialization.
         * @type {?}
         */
        MdDatepickerIntl.prototype.changes;
        /**
         * A label for the calendar popup (used by screen readers).
         * @type {?}
         */
        MdDatepickerIntl.prototype.calendarLabel;
        /**
         * A label for the button used to open the calendar popup (used by screen readers).
         * @type {?}
         */
        MdDatepickerIntl.prototype.openCalendarLabel;
        /**
         * A label for the previous month button (used by screen readers).
         * @type {?}
         */
        MdDatepickerIntl.prototype.prevMonthLabel;
        /**
         * A label for the next month button (used by screen readers).
         * @type {?}
         */
        MdDatepickerIntl.prototype.nextMonthLabel;
        /**
         * A label for the previous year button (used by screen readers).
         * @type {?}
         */
        MdDatepickerIntl.prototype.prevYearLabel;
        /**
         * A label for the next year button (used by screen readers).
         * @type {?}
         */
        MdDatepickerIntl.prototype.nextYearLabel;
        /**
         * A label for the 'switch to month view' button (used by screen readers).
         * @type {?}
         */
        MdDatepickerIntl.prototype.switchToMonthViewLabel;
        /**
         * A label for the 'switch to year view' button (used by screen readers).
         * @type {?}
         */
        MdDatepickerIntl.prototype.switchToYearViewLabel;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/calendar.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * A calendar that is used as part of the datepicker.
     * \@docs-private
     * @template D
     */
    var MdCalendar = /** @class */ (function () {
        function MdCalendar(_elementRef, _intl, _ngZone, _dateAdapter, _dateFormats, changeDetectorRef) {
            var _this = this;
            this._elementRef = _elementRef;
            this._intl = _intl;
            this._ngZone = _ngZone;
            this._dateAdapter = _dateAdapter;
            this._dateFormats = _dateFormats;
            this._isCompatibilityMode = false;
            /**
             * Whether the calendar should be started in month or year view.
             */
            this.startView = 'month';
            this.type = 'normal';
            /**
             * Emits when the currently selected date changes.
             */
            this.selectedChange = new core.EventEmitter();
            /**
             * Emits when any date is selected.
             */
            this.userSelection = new core.EventEmitter();
            this.months = Array.from({ length: 12 }, (/**
             * @param {?} v
             * @param {?} k
             * @return {?}
             */
            function (v, k) { return k; }));
            /**
             * Date filter for the month and year views.
             */
            this._dateFilterForViews = (/**
             * @param {?} date
             * @return {?}
             */
            function (date) {
                return !!date && (!_this.dateFilter || _this.dateFilter(date)) && (!_this.minDate || _this._dateAdapter.compareDate(date, _this.minDate) >= 0) && (!_this.maxDate || _this._dateAdapter.compareDate(date, _this.maxDate) <= 0);
            });
            if (!this._dateAdapter) {
                throw createMissingDateImplError('DateAdapter');
            }
            if (!this._dateFormats) {
                throw createMissingDateImplError('MD_DATE_FORMATS');
            }
            this._intlChanges = _intl.changes.pipe(operators.merge(this._dateFormats._getChanges)).subscribe((/**
             * @return {?}
             */
            function () {
                changeDetectorRef.markForCheck();
            }));
            this._dateAdapterr = ((/** @type {?} */ (_dateAdapter)));
        }
        Object.defineProperty(MdCalendar.prototype, "_activeNextDate", {
            /**
             * The current active date. This determines which time period is shown and which date is
             * highlighted when using keyboard navigation.
             */
            get: /**
             * The current active date. This determines which time period is shown and which date is
             * highlighted when using keyboard navigation.
             * @return {?}
             */
            function () {
                /** @type {?} */
                var date = this._dateAdapter.clone(this._activeDate);
                if (((/** @type {?} */ (date)))._d) {
                    ((/** @type {?} */ (date))).add(1, 'jMonth');
                    // (date as any)._d.setMonth((date as any)._d.getMonth() + 1);
                    return ((/** @type {?} */ (date)))._d;
                }
                else {
                    ((/** @type {?} */ (date))).setMonth(((/** @type {?} */ (date))).getMonth() + 1);
                    return date;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MdCalendar.prototype, "_activeDate", {
            get: /**
             * @return {?}
             */
            function () {
                return this._clampedActiveDate;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MdCalendar.prototype, "_periodButtonText", {
            /** The label for the current calendar view. */
            get: /**
             * The label for the current calendar view.
             * @return {?}
             */
            function () {
                return this._monthView ? this._dateAdapter.format(this._activeDate, this._dateFormats.display.monthYearLabel)
                    .toLocaleUpperCase() : this._dateAdapter.getYearName(this._activeDate);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MdCalendar.prototype, "_periodButtonLabel", {
            get: /**
             * @return {?}
             */
            function () {
                return this._monthView ? this._intl.switchToYearViewLabel : this._intl.switchToMonthViewLabel;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MdCalendar.prototype, "_prevButtonLabel", {
            /** The label for the the previous button. */
            get: /**
             * The label for the the previous button.
             * @return {?}
             */
            function () {
                return this._monthView ? this._intl.prevMonthLabel : this._intl.prevYearLabel;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MdCalendar.prototype, "_nextButtonLabel", {
            /** The label for the the next button. */
            get: /**
             * The label for the the next button.
             * @return {?}
             */
            function () {
                return this._monthView ? this._intl.nextMonthLabel : this._intl.nextYearLabel;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        MdCalendar.prototype.ngAfterContentInit = /**
         * @return {?}
         */
        function () {
            this._activeDate = this.startAt || this._dateAdapter.today();
            this._focusActiveCell();
            this._monthView = this.startView != 'year';
            //fill year drop
            // main page
            if (this.minDate && this.maxDate) {
                this.foods = Array.from({ length: 100 }, (/**
                 * @param {?} v
                 * @param {?} k
                 * @return {?}
                 */
                function (v, k) { return 10 - k; }));
            }
            else if (this.minDate && !this.maxDate) {
                this.foods = Array.from({ length: 100 }, (/**
                 * @param {?} v
                 * @param {?} k
                 * @return {?}
                 */
                function (v, k) { return 10 - k; }));
            }
            else if (this.maxDate && !this.minDate) {
                this.foods = Array.from({ length: 100 }, (/**
                 * @param {?} v
                 * @param {?} k
                 * @return {?}
                 */
                function (v, k) { return 10 - k; }));
            }
            //for old dates like birthday
            else {
                this.foods = Array.from({ length: 100 }, (/**
                 * @param {?} v
                 * @param {?} k
                 * @return {?}
                 */
                function (v, k) { return 10 - k; }));
            }
        };
        /**
         * @param {?} v
         * @return {?}
         */
        MdCalendar.prototype._showDropYear = /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            return this._dateAdapter.getYear(this._dateAdapter.addCalendarYears((this.startAt || (/** @type {?} */ (new Date()))), v));
        };
        /**
         * @param {?} v
         * @return {?}
         */
        MdCalendar.prototype._showDropMonth = /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            return this._dateAdapter.getMonthNames("long")[v];
        };
        /**
         * @param {?} v
         * @return {?}
         */
        MdCalendar.prototype._yearSelected = /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._activeDate = this._dateAdapter.addCalendarYears(this.startAt || (/** @type {?} */ (new Date())), v.value);
        };
        /**
         * @param {?} v
         * @return {?}
         */
        MdCalendar.prototype._monthSelectedd = /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            /** @type {?} */
            var daysInMonth = this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(this._dateAdapter.getYear(this._activeDate), v.value, 1));
            this._activeDate = this._dateAdapter.createDate(this._dateAdapter.getYear(this._activeDate), v.value, Math.min(this._dateAdapter.getDate(this._activeDate), daysInMonth));
        };
        /**
         * @return {?}
         */
        MdCalendar.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            this._intlChanges.unsubscribe();
        };
        /** Handles date selection in the month view. */
        /**
         * Handles date selection in the month view.
         * @param {?} date
         * @return {?}
         */
        MdCalendar.prototype._dateSelected = /**
         * Handles date selection in the month view.
         * @param {?} date
         * @return {?}
         */
        function (date) {
            this.selectedChange.emit(date);
        };
        /**
         * @return {?}
         */
        MdCalendar.prototype._userSelected = /**
         * @return {?}
         */
        function () {
            this.userSelection.emit();
        };
        /** Handles month selection in the year view. */
        /**
         * Handles month selection in the year view.
         * @param {?} month
         * @return {?}
         */
        MdCalendar.prototype._monthSelected = /**
         * Handles month selection in the year view.
         * @param {?} month
         * @return {?}
         */
        function (month) {
            this._activeDate = month;
            this._monthView = true;
        };
        /** Handles user clicks on the period label. */
        /**
         * Handles user clicks on the period label.
         * @return {?}
         */
        MdCalendar.prototype._currentPeriodClicked = /**
         * Handles user clicks on the period label.
         * @return {?}
         */
        function () {
            this._monthView = !this._monthView;
        };
        /** Handles user clicks on the previous button. */
        /**
         * Handles user clicks on the previous button.
         * @return {?}
         */
        MdCalendar.prototype._previousClicked = /**
         * Handles user clicks on the previous button.
         * @return {?}
         */
        function () {
            this._activeDate = this._monthView ? this._dateAdapter.addCalendarMonths(this._activeDate, -1) : this._dateAdapter.addCalendarYears(this._activeDate, -1);
        };
        /** Handles user clicks on the next button. */
        /**
         * Handles user clicks on the next button.
         * @return {?}
         */
        MdCalendar.prototype._nextClicked = /**
         * Handles user clicks on the next button.
         * @return {?}
         */
        function () {
            this._activeDate = this._monthView ? this._dateAdapter.addCalendarMonths(this._activeDate, 1) : this._dateAdapter.addCalendarYears(this._activeDate, 1);
        };
        /** Whether the previous period button is enabled. */
        /**
         * Whether the previous period button is enabled.
         * @return {?}
         */
        MdCalendar.prototype._previousEnabled = /**
         * Whether the previous period button is enabled.
         * @return {?}
         */
        function () {
            if (!this.minDate) {
                return true;
            }
            return !this.minDate || !this._isSameView(this._activeDate, this.minDate);
        };
        /** Whether the next period button is enabled. */
        /**
         * Whether the next period button is enabled.
         * @return {?}
         */
        MdCalendar.prototype._nextEnabled = /**
         * Whether the next period button is enabled.
         * @return {?}
         */
        function () {
            return !this.maxDate || !this._isSameView(this._activeDate, this.maxDate);
        };
        /** Handles keydown events on the calendar body. */
        /**
         * Handles keydown events on the calendar body.
         * @param {?} event
         * @return {?}
         */
        MdCalendar.prototype._handleCalendarBodyKeydown = /**
         * Handles keydown events on the calendar body.
         * @param {?} event
         * @return {?}
         */
        function (event) {
            // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent
            // disabled ones from being selected. This may not be ideal, we should look into whether
            // navigation should skip over disabled dates, and if so, how to implement that efficiently.
            if (this._monthView) {
                this._handleCalendarBodyKeydownInMonthView(event);
            }
            else {
                this._handleCalendarBodyKeydownInYearView(event);
            }
        };
        /** Focuses the active cell after the microtask queue is empty. */
        /**
         * Focuses the active cell after the microtask queue is empty.
         * @return {?}
         */
        MdCalendar.prototype._focusActiveCell = /**
         * Focuses the active cell after the microtask queue is empty.
         * @return {?}
         */
        function () {
            var _this = this;
            this._ngZone.runOutsideAngular((/**
             * @return {?}
             */
            function () { return operators.first.call(_this._ngZone.onStable).subscribe((/**
             * @return {?}
             */
            function () {
                _this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();
            })); }));
        };
        /** Whether the two dates represent the same view in the current view mode (month or year). */
        /**
         * Whether the two dates represent the same view in the current view mode (month or year).
         * @private
         * @param {?} date1
         * @param {?} date2
         * @return {?}
         */
        MdCalendar.prototype._isSameView = /**
         * Whether the two dates represent the same view in the current view mode (month or year).
         * @private
         * @param {?} date1
         * @param {?} date2
         * @return {?}
         */
        function (date1, date2) {
            return this._monthView ? this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) && this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2) : this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);
        };
        /** Handles keydown events on the calendar body when calendar is in month view. */
        /**
         * Handles keydown events on the calendar body when calendar is in month view.
         * @private
         * @param {?} event
         * @return {?}
         */
        MdCalendar.prototype._handleCalendarBodyKeydownInMonthView = /**
         * Handles keydown events on the calendar body when calendar is in month view.
         * @private
         * @param {?} event
         * @return {?}
         */
        function (event) {
            switch (event.keyCode) {
                case keycodes.LEFT_ARROW:
                    this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -1);
                    break;
                case keycodes.RIGHT_ARROW:
                    this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 1);
                    break;
                case keycodes.UP_ARROW:
                    this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);
                    break;
                case keycodes.DOWN_ARROW:
                    this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);
                    break;
                case keycodes.HOME:
                    this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 1 - this._dateAdapter.getDate(this._activeDate));
                    break;
                case keycodes.END:
                    this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, (this._dateAdapter.getNumDaysInMonth(this._activeDate) - this._dateAdapter.getDate(this._activeDate)));
                    break;
                case keycodes.PAGE_UP:
                    this._activeDate = event.altKey ? this._dateAdapter.addCalendarYears(this._activeDate, -1) : this._dateAdapter.addCalendarMonths(this._activeDate, -1);
                    break;
                case keycodes.PAGE_DOWN:
                    this._activeDate = event.altKey ? this._dateAdapter.addCalendarYears(this._activeDate, 1) : this._dateAdapter.addCalendarMonths(this._activeDate, 1);
                    break;
                case keycodes.ENTER:
                    if (this._dateFilterForViews(this._activeDate)) {
                        this._dateSelected(this._activeDate);
                        // Prevent unexpected default actions such as form submission.
                        event.preventDefault();
                    }
                    return;
                default:
                    // Don't prevent default or focus active cell on keys that we don't explicitly handle.
                    return;
            }
            this._focusActiveCell();
            // Prevent unexpected default actions such as form submission.
            event.preventDefault();
        };
        /** Handles keydown events on the calendar body when calendar is in year view. */
        /**
         * Handles keydown events on the calendar body when calendar is in year view.
         * @private
         * @param {?} event
         * @return {?}
         */
        MdCalendar.prototype._handleCalendarBodyKeydownInYearView = /**
         * Handles keydown events on the calendar body when calendar is in year view.
         * @private
         * @param {?} event
         * @return {?}
         */
        function (event) {
            switch (event.keyCode) {
                case keycodes.LEFT_ARROW:
                    this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -1);
                    break;
                case keycodes.RIGHT_ARROW:
                    this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 1);
                    break;
                case keycodes.UP_ARROW:
                    this._activeDate = this._prevMonthInSameCol(this._activeDate);
                    break;
                case keycodes.DOWN_ARROW:
                    this._activeDate = this._nextMonthInSameCol(this._activeDate);
                    break;
                case keycodes.HOME:
                    this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -this._dateAdapter.getMonth(this._activeDate));
                    break;
                case keycodes.END:
                    this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 11 - this._dateAdapter.getMonth(this._activeDate));
                    break;
                case keycodes.PAGE_UP:
                    this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);
                    break;
                case keycodes.PAGE_DOWN:
                    this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);
                    break;
                case keycodes.ENTER:
                    this._monthSelected(this._activeDate);
                    break;
                default:
                    // Don't prevent default or focus active cell on keys that we don't explicitly handle.
                    return;
            }
            this._focusActiveCell();
            // Prevent unexpected default actions such as form submission.
            event.preventDefault();
        };
        /**
         * Determine the date for the month that comes before the given month in the same column in the
         * calendar table.
         */
        /**
         * Determine the date for the month that comes before the given month in the same column in the
         * calendar table.
         * @private
         * @param {?} date
         * @return {?}
         */
        MdCalendar.prototype._prevMonthInSameCol = /**
         * Determine the date for the month that comes before the given month in the same column in the
         * calendar table.
         * @private
         * @param {?} date
         * @return {?}
         */
        function (date) {
            // Determine how many months to jump forward given that there are 2 empty slots at the beginning
            // of each year.
            /** @type {?} */
            var increment = this._dateAdapter.getMonth(date) <= 4 ? -5 : (this._dateAdapter.getMonth(date) >= 7 ? -7 : -12);
            return this._dateAdapter.addCalendarMonths(date, increment);
        };
        /**
         * Determine the date for the month that comes after the given month in the same column in the
         * calendar table.
         */
        /**
         * Determine the date for the month that comes after the given month in the same column in the
         * calendar table.
         * @private
         * @param {?} date
         * @return {?}
         */
        MdCalendar.prototype._nextMonthInSameCol = /**
         * Determine the date for the month that comes after the given month in the same column in the
         * calendar table.
         * @private
         * @param {?} date
         * @return {?}
         */
        function (date) {
            // Determine how many months to jump forward given that there are 2 empty slots at the beginning
            // of each year.
            /** @type {?} */
            var increment = this._dateAdapter.getMonth(date) <= 4 ? 7 : (this._dateAdapter.getMonth(date) >= 7 ? 5 : 12);
            return this._dateAdapter.addCalendarMonths(date, increment);
        };
        MdCalendar.decorators = [
            { type: core.Component, args: [{
                        selector: 'md-calendar, mat-calendar',
                        template: "<div class=\"calendar-drops\">\r\n    <!--<button *ngIf=\"!_isCompatibilityMode\" [disableRipple]=\"true\" mat-button class=\"mat-calendar-period-button\"-->\r\n    <!--(click)=\"_currentPeriodClicked()\" [attr.aria-label]=\"_periodButtonLabel\">-->\r\n    <!--\u0645\u0627\u0647-->\r\n    <!--<div class=\"mat-calendar-arrow\" [class.mat-calendar-invert]=\"!_monthView\"></div>-->\r\n    <!--</button>-->\r\n    <!--<button *ngIf=\"_isCompatibilityMode\" mat-button class=\"mat-calendar-period-button\"-->\r\n    <!--(click)=\"_currentPeriodClicked()\" [attr.aria-label]=\"_periodButtonLabel\">-->\r\n    <!--\u0645\u0627\u0647-->\r\n    <!--<div class=\"mat-calendar-arrow\" [class.mat-calendar-invert]=\"!_monthView\"></div>-->\r\n    <!--</button>-->\r\n\r\n    <mat-select #yearsDrop placeholder=\"\u0633\u0627\u0644\" style=\"width: 50px;\"\r\n                (change)=\"yearsDrop.value = null;_yearSelected($event)\"\r\n                panelClass=\"drops-panels years {{(_dateAdapterr?.lang == 'en') ? 'latin' :''}}\">\r\n        <mat-option *ngFor=\"let food of foods\" [value]=\"food\">\r\n            {{ _showDropYear(food) }}\r\n        </mat-option>\r\n    </mat-select>\r\n    <mat-select #monthsDrop placeholder=\"\u0645\u0627\u0647\" style=\"width: 70px;\"\r\n                (change)=\"monthsDrop.value = null;_monthSelectedd($event)\"\r\n                panelClass=\"drops-panels months {{(_dateAdapterr?.lang == 'en') ? 'latin' :''}}\">\r\n        <mat-option *ngFor=\"let month of months\" [value]=\"month\">\r\n            {{ _showDropMonth(month) }}\r\n        </mat-option>\r\n    </mat-select>\r\n\r\n</div>\r\n<div class=\"mat-calendar-header\">\r\n    <div class=\"mat-calendar-controls\" [class.month]=\"_monthView\">\r\n        <!--\r\n          TODO(mmalerba): Clean up duplicated compatibility mode code when we have a better way to do\r\n          this.\r\n        -->\r\n\r\n        <!--additions by puria-->\r\n        <ng-content></ng-content>\r\n\r\n\r\n        <!-- Check for compatibility mode and use correct prefix for md-icon-button. -->\r\n        <button *ngIf=\"!_isCompatibilityMode\" mat-icon-button class=\"mat-calendar-previous-button\"\r\n                [disabled]=\"!_previousEnabled()\" (click)=\"_previousClicked()\"\r\n                [attr.aria-label]=\"_prevButtonLabel\">\r\n        </button>\r\n        <button *ngIf=\"_isCompatibilityMode\" mat-icon-button class=\"mat-calendar-previous-button\"\r\n                [disabled]=\"!_previousEnabled()\" (click)=\"_previousClicked()\"\r\n                [attr.aria-label]=\"_prevButtonLabel\">\r\n        </button>\r\n\r\n        <!-- Check for compatibility mode and use correct prefix for md-button. -->\r\n\r\n\r\n        <div class=\"mat-calendar-spacer\"></div>\r\n\r\n\r\n        <!-- Check for compatibility mode and use correct prefix for md-icon-button. -->\r\n        <button *ngIf=\"!_isCompatibilityMode\" mat-icon-button class=\"mat-calendar-next-button\"\r\n                [disabled]=\"!_nextEnabled()\" (click)=\"_nextClicked()\"\r\n                [attr.aria-label]=\"_nextButtonLabel\">\r\n        </button>\r\n        <button *ngIf=\"_isCompatibilityMode\" mat-icon-button class=\"mat-calendar-next-button\"\r\n                [disabled]=\"!_nextEnabled()\" (click)=\"_nextClicked()\"\r\n                [attr.aria-label]=\"_nextButtonLabel\">\r\n        </button>\r\n    </div>\r\n</div>\r\n\r\n<div class=\"mat-calendar-content\" (keydown)=\"_handleCalendarBodyKeydown($event)\"\r\n     [ngSwitch]=\"_monthView\" cdkMonitorSubtreeFocus>\r\n    <md-month-view\r\n        *ngSwitchCase=\"true\"\r\n        [activeDate]=\"_activeDate\"\r\n        [subedDate]=\"subed\"\r\n        [selected]=\"selected\"\r\n        [dateFilter]=\"_dateFilterForViews\"\r\n        (selectedChange)=\"_dateSelected($event)\"\r\n        (userSelection)=\"_userSelected()\">\r\n    </md-month-view>\r\n    <md-month-view\r\n        *ngIf=\"type == 'wide' && _monthView\"\r\n        [activeDate]=\"_activeNextDate\"\r\n        [subedDate]=\"subed\"\r\n        [selected]=\"selected\"\r\n        [dateFilter]=\"_dateFilterForViews\"\r\n        (selectedChange)=\"_dateSelected($event)\"\r\n        (userSelection)=\"_userSelected()\">\r\n    </md-month-view>\r\n    <md-year-view\r\n        *ngSwitchDefault\r\n        [activeDate]=\"_activeDate\"\r\n        [selected]=\"selected\"\r\n        [dateFilter]=\"_dateFilterForViews\"\r\n        (selectedChange)=\"_monthSelected($event)\">\r\n    </md-year-view>\r\n</div>\r\n",
                        host: {
                            'class': 'mat-calendar', '[class.wide-calendar]': '(type == "wide")'
                        },
                        encapsulation: core.ViewEncapsulation.None,
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        styles: [".mat-calendar{display:block}.mat-calendar-header{padding:16px}.mat-calendar-content{margin:0;padding:0 8px 8px;outline:0}.mat-calendar-controls{display:flex;margin:0}.mat-calendar-spacer{flex:1 1 auto}.mat-calendar-period-button{min-width:0}.mat-calendar-period-button:hover .mat-button-focus-overlay{opacity:0}.subed{background:#ffd2de}.calendar-drops{position:absolute;top:12px;left:26px;display:flex;flex-direction:row-reverse;align-items:flex-end}.calendar-drops .mat-select-value{text-align:left}.drops-panels.months .mat-select-panel{width:70px}.drops-panels .mat-select-panel{width:50px}.drops-panels .mat-option-text{font-size:13px}.mat-calendar-arrow{display:inline-block;width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top-width:5px;border-top-style:solid;margin:0!important;vertical-align:middle}.mat-calendar-arrow.mat-calendar-invert{transform:rotate(180deg)}[dir=rtl] .mat-calendar-arrow{margin:0 5px 0 0}.mat-calendar-next-button,.mat-calendar-previous-button{position:relative}.mat-calendar-next-button::after,.mat-calendar-previous-button::after{top:0;left:0;right:0;bottom:0;position:absolute;content:\"\";margin:15.5px;border:0 solid currentColor;border-top-width:2px}[dir=rtl] .mat-calendar-next-button,[dir=rtl] .mat-calendar-previous-button{transform:rotate(180deg)}.mat-calendar-previous-button::after{border-left-width:2px;transform:translateX(2px) rotate(-45deg) scale(-1)}.mat-calendar-next-button::after{border-right-width:2px;transform:translateX(-2px) rotate(45deg) scale(-1)}.mat-calendar-table{border-spacing:0;border-collapse:collapse;width:100%}.mat-calendar-table-header th{text-align:center;padding:0 0 8px}.mat-calendar-table-header-divider{position:relative;height:1px}.mat-calendar-table-header-divider::after{content:\"\";position:absolute;top:0;left:-8px;right:-8px;height:1px}"]
                    }] }
        ];
        /** @nocollapse */
        MdCalendar.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: MdDatepickerIntl },
            { type: core.NgZone },
            { type: material.DateAdapter, decorators: [{ type: core.Optional }] },
            { type: undefined, decorators: [{ type: core.Optional }, { type: core.Inject, args: [material.MAT_DATE_FORMATS,] }] },
            { type: core.ChangeDetectorRef }
        ]; };
        MdCalendar.propDecorators = {
            startAt: [{ type: core.Input }],
            startView: [{ type: core.Input }],
            type: [{ type: core.Input }],
            selected: [{ type: core.Input }],
            subed: [{ type: core.Input }],
            minDate: [{ type: core.Input }],
            maxDate: [{ type: core.Input }],
            dateFilter: [{ type: core.Input }],
            selectedChange: [{ type: core.Output }],
            userSelection: [{ type: core.Output }]
        };
        return MdCalendar;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        MdCalendar.prototype._intlChanges;
        /** @type {?} */
        MdCalendar.prototype._isCompatibilityMode;
        /**
         * A date representing the period (month or year) to start the calendar in.
         * @type {?}
         */
        MdCalendar.prototype.startAt;
        /**
         * Whether the calendar should be started in month or year view.
         * @type {?}
         */
        MdCalendar.prototype.startView;
        /** @type {?} */
        MdCalendar.prototype.type;
        /**
         * The currently selected date.
         * @type {?}
         */
        MdCalendar.prototype.selected;
        /** @type {?} */
        MdCalendar.prototype.subed;
        /**
         * The minimum selectable date.
         * @type {?}
         */
        MdCalendar.prototype.minDate;
        /**
         * The maximum selectable date.
         * @type {?}
         */
        MdCalendar.prototype.maxDate;
        /**
         * A function used to filter which dates are selectable.
         * @type {?}
         */
        MdCalendar.prototype.dateFilter;
        /**
         * Emits when the currently selected date changes.
         * @type {?}
         */
        MdCalendar.prototype.selectedChange;
        /**
         * Emits when any date is selected.
         * @type {?}
         */
        MdCalendar.prototype.userSelection;
        /** @type {?} */
        MdCalendar.prototype.months;
        /**
         * Date filter for the month and year views.
         * @type {?}
         */
        MdCalendar.prototype._dateFilterForViews;
        /** @type {?} */
        MdCalendar.prototype._dateAdapterr;
        /** @type {?} */
        MdCalendar.prototype.foods;
        /**
         * @type {?}
         * @private
         */
        MdCalendar.prototype._clampedActiveDate;
        /**
         * @type {?}
         * @private
         */
        MdCalendar.prototype._clampedSubedDate;
        /**
         * Whether the calendar is in month view.
         * @type {?}
         */
        MdCalendar.prototype._monthView;
        /**
         * @type {?}
         * @private
         */
        MdCalendar.prototype._elementRef;
        /**
         * @type {?}
         * @private
         */
        MdCalendar.prototype._intl;
        /**
         * @type {?}
         * @private
         */
        MdCalendar.prototype._ngZone;
        /**
         * @type {?}
         * @private
         */
        MdCalendar.prototype._dateAdapter;
        /**
         * @type {?}
         * @private
         */
        MdCalendar.prototype._dateFormats;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/datepicker.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Used to generate a unique ID for each datepicker instance.
     * @type {?}
     */
    var datepickerUid = 0;
    /**
     * Injection token that determines the scroll handling while the calendar is open.
     * @type {?}
     */
    var MD_DATEPICKER_SCROLL_STRATEGY = new core.InjectionToken('md-datepicker-scroll-strategy');
    /**
     * \@docs-private
     * @param {?} overlay
     * @return {?}
     */
    function MD_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {
        return (/**
         * @return {?}
         */
        function () { return overlay.scrollStrategies.reposition(); });
    }
    /**
     * \@docs-private
     * @type {?}
     */
    var MD_DATEPICKER_SCROLL_STRATEGY_PROVIDER = {
        provide: MD_DATEPICKER_SCROLL_STRATEGY, deps: [overlay.Overlay], useFactory: MD_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY,
    };
    /**
     * Component used as the content for the datepicker dialog and popup. We use this instead of using
     * MdCalendar directly as the content so we can control the initial focus. This also gives us a
     * place to put additional features of the popup that are not part of the calendar itself in the
     * future. (e.g. confirmation buttons).
     * \@docs-private
     * @template D
     */
    var MdDatepickerContent = /** @class */ (function () {
        function MdDatepickerContent() {
        }
        /**
         * @return {?}
         */
        MdDatepickerContent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
        function () {
            this._calendar._focusActiveCell();
        };
        /**
         * Handles keydown event on datepicker content.
         * @param event The event.
         */
        /**
         * Handles keydown event on datepicker content.
         * @param {?} event The event.
         * @return {?}
         */
        MdDatepickerContent.prototype._handleKeydown = /**
         * Handles keydown event on datepicker content.
         * @param {?} event The event.
         * @return {?}
         */
        function (event) {
            if (event.keyCode === keycodes.ESCAPE) {
                this.datepicker.close();
                event.preventDefault();
                event.stopPropagation();
            }
        };
        MdDatepickerContent.decorators = [
            { type: core.Component, args: [{
                        selector: 'md-datepicker-content, mat-datepicker-content',
                        template: "<md-locale-changer>miladi</md-locale-changer>\r\n<md-calendar cdkTrapFocus\r\n             [id]=\"datepicker.id\"\r\n             [type]=\"datepicker.type\"\r\n             [startAt]=\"datepicker.startAt\"\r\n             [startView]=\"datepicker.startView\"\r\n             [minDate]=\"datepicker._minDate\"\r\n             [maxDate]=\"datepicker._maxDate\"\r\n             [dateFilter]=\"datepicker._dateFilter\"\r\n             [selected]=\"datepicker._selected\"\r\n             [subed]=\"datepicker.subed\"\r\n             (selectedChange)=\"datepicker._select($event)\"\r\n             (userSelection)=\"datepicker.close()\">\r\n</md-calendar>\r\n",
                        host: {
                            'class': 'mat-datepicker-content',
                            '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',
                            '(keydown)': '_handleKeydown($event)',
                            '[class.gregorian]': 'datepicker.adapter.lang == "en"',
                        },
                        encapsulation: core.ViewEncapsulation.None,
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        styles: [".gregorian md-calendar * .superSmall{font-family:vazir,sans-serif!important}.mat-calendar-table-header{line-height:14px}.mlabel{text-align:center;margin-top:-40px;margin-bottom:10px;color:rgba(0,0,0,.54);line-height:10px;pointer-events:none}.mlabel span{font-size:10px;color:#989898;padding:0 2px}.mat-datepicker-content{box-shadow:0 5px 5px -3px rgba(0,0,0,.2),0 8px 10px 1px rgba(0,0,0,.14),0 3px 14px 2px rgba(0,0,0,.12);direction:rtl;display:block}md-locale-changer{display:block}md-locale-changer>*{margin:20px}md-locale-changer mat-button-toggle-group{margin:16px 16px 0}.mat-calendar{width:296px;height:auto}.mat-datepicker-content-touch{box-shadow:0 0 0 0 rgba(0,0,0,.2),0 0 0 0 rgba(0,0,0,.14),0 0 0 0 rgba(0,0,0,.12);display:block;overflow:auto;margin:-24px}.mat-datepicker-content-touch .mat-calendar{min-width:250px;min-height:312px;max-width:750px;max-height:788px}@media all and (orientation:landscape){.mat-datepicker-content-touch .mat-calendar{width:64vh;height:80vh}}@media all and (orientation:portrait){.mat-datepicker-content-touch .mat-calendar{width:80vw;height:100vw}}"]
                    }] }
        ];
        MdDatepickerContent.propDecorators = {
            _calendar: [{ type: core.ViewChild, args: [MdCalendar, { static: true },] }]
        };
        return MdDatepickerContent;
    }());
    if (false) {
        /** @type {?} */
        MdDatepickerContent.prototype.datepicker;
        /** @type {?} */
        MdDatepickerContent.prototype._calendar;
    }
    // TODO(mmalerba): We use a component instead of a directive here so the user can use implicit
    // template reference variables (e.g. #d vs #d="mdDatepicker"). We can change this to a directive if
    // angular adds support for `exportAs: '$implicit'` on directives.
    /**
     * Component responsible for managing the datepicker popup/dialog.
     * @template D
     */
    var MdDatepicker = /** @class */ (function () {
        function MdDatepicker(_dialog, _overlay, _ngZone, _viewContainerRef, _scrollStrategy, _dateAdapter, _dir, _document) {
            this._dialog = _dialog;
            this._overlay = _overlay;
            this._ngZone = _ngZone;
            this._viewContainerRef = _viewContainerRef;
            this._scrollStrategy = _scrollStrategy;
            this._dateAdapter = _dateAdapter;
            this._dir = _dir;
            this._document = _document;
            /**
             * The view that the calendar should start in.
             */
            this.startView = 'month';
            this.type = 'normal';
            /**
             * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather
             * than a popup and elements have more padding to allow for bigger touch targets.
             */
            this.touchUi = false;
            /**
             * Emits new selected date when selected date changes.
             * @deprecated Switch to the `dateChange` and `dateInput` binding on the input element.
             */
            this.selectedChanged = new core.EventEmitter();
            /**
             * Whether the calendar is open.
             */
            this.opened = false;
            /**
             * The id for the datepicker calendar.
             */
            this.id = "md-datepicker-" + datepickerUid++;
            this._validSelected = null;
            this._validSubed = null;
            /**
             * The element that was focused before the datepicker was opened.
             */
            this._focusedElementBeforeOpen = null;
            if (!this._dateAdapter) {
                throw createMissingDateImplError('DateAdapter');
            }
            this._dateAdapter;
        }
        Object.defineProperty(MdDatepicker.prototype, "subed", {
            //observable
            /** The currently selected date. */
            get: 
            //observable
            /**
             * The currently selected date.
             * @return {?}
             */
            function () {
                return this._validSubed;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._validSubed = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MdDatepicker.prototype, "startAt", {
            /** The date to open the calendar to initially. */
            get: /**
             * The date to open the calendar to initially.
             * @return {?}
             */
            function () {
                // If an explicit startAt is set we start there, otherwise we start at whatever the currently
                // selected value is.
                return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);
            },
            set: /**
             * @param {?} date
             * @return {?}
             */
            function (date) {
                this._startAt = date;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MdDatepicker.prototype, "disabled", {
            /** Whether the datepicker pop-up should be disabled. */
            get: /**
             * Whether the datepicker pop-up should be disabled.
             * @return {?}
             */
            function () {
                return this._disabled === undefined ? this._datepickerInput.disabled : this._disabled;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._disabled = coercion.coerceBooleanProperty(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MdDatepicker.prototype, "_selected", {
            /** The currently selected date. */
            get: /**
             * The currently selected date.
             * @return {?}
             */
            function () {
                return this._validSelected;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._validSelected = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MdDatepicker.prototype, "_minDate", {
            /** The minimum selectable date. */
            get: /**
             * The minimum selectable date.
             * @return {?}
             */
            function () {
                return this._datepickerInput && this._datepickerInput.min;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MdDatepicker.prototype, "_maxDate", {
            /** The maximum selectable date. */
            get: /**
             * The maximum selectable date.
             * @return {?}
             */
            function () {
                return this._datepickerInput && this._datepickerInput.max;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MdDatepicker.prototype, "_dateFilter", {
            get: /**
             * @return {?}
             */
            function () {
                return this._datepickerInput && this._datepickerInput._dateFilter;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        MdDatepicker.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            this.close();
            if (this._popupRef) {
                this._popupRef.dispose();
            }
            if (this._inputSubscription) {
                this._inputSubscription.unsubscribe();
            }
        };
        /** Selects the given date */
        /**
         * Selects the given date
         * @param {?} date
         * @return {?}
         */
        MdDatepicker.prototype._select = /**
         * Selects the given date
         * @param {?} date
         * @return {?}
         */
        function (date) {
            /** @type {?} */
            var oldValue = this._selected;
            if (((/** @type {?} */ (date)))._d) {
                this._selected = ((/** @type {?} */ (date)))._d;
            }
            else {
                this._selected = date;
            }
            this.selectedChanged.emit(this._selected);
        };
        /**
         * Register an input with this datepicker.
         * @param input The datepicker input to register with this datepicker.
         */
        /**
         * Register an input with this datepicker.
         * @param {?} input The datepicker input to register with this datepicker.
         * @return {?}
         */
        MdDatepicker.prototype._registerInput = /**
         * Register an input with this datepicker.
         * @param {?} input The datepicker input to register with this datepicker.
         * @return {?}
         */
        function (input) {
            var _this = this;
            if (this._datepickerInput) {
                throw Error('An MdDatepicker can only be associated with a single input.');
            }
            this._datepickerInput = input;
            this._inputSubscription = this._datepickerInput._valueChange.subscribe((/**
             * @param {?} value
             * @return {?}
             */
            function (value) { return _this._selected = value; }));
        };
        /** Open the calendar. */
        /**
         * Open the calendar.
         * @return {?}
         */
        MdDatepicker.prototype.open = /**
         * Open the calendar.
         * @return {?}
         */
        function () {
            if (this.opened || this.disabled) {
                return;
            }
            if (!this._datepickerInput) {
                throw Error('Attempted to open an MdDatepicker with no associated input.');
            }
            if (this._document) {
                this._focusedElementBeforeOpen = this._document.activeElement;
            }
            this.touchUi ? this._openAsDialog() : this._openAsPopup();
            this.opened = true;
        };
        /** Close the calendar. */
        /**
         * Close the calendar.
         * @return {?}
         */
        MdDatepicker.prototype.close = /**
         * Close the calendar.
         * @return {?}
         */
        function () {
            if (!this.opened) {
                return;
            }
            if (this._popupRef && this._popupRef.hasAttached()) {
                this._popupRef.detach();
            }
            if (this._dialogRef) {
                this._dialogRef.close();
                this._dialogRef = null;
            }
            if (this._calendarPortal && this._calendarPortal.isAttached) {
                this._calendarPortal.detach();
            }
            if (this._focusedElementBeforeOpen && typeof this._focusedElementBeforeOpen.focus === 'function') {
                this._focusedElementBeforeOpen.focus();
                this._focusedElementBeforeOpen = null;
            }
            this.opened = false;
        };
        /** Open the calendar as a dialog. */
        /**
         * Open the calendar as a dialog.
         * @private
         * @return {?}
         */
        MdDatepicker.prototype._openAsDialog = /**
         * Open the calendar as a dialog.
         * @private
         * @return {?}
         */
        function () {
            var _this = this;
            this._dialogRef = this._dialog.open(MdDatepickerContent, {
                direction: this._dir ? this._dir.value : 'ltr', viewContainerRef: this._viewContainerRef,
            });
            this._dialogRef.afterClosed().subscribe((/**
             * @return {?}
             */
            function () { return _this.close(); }));
            this._dialogRef.componentInstance.datepicker = this;
        };
        /** Open the calendar as a popup. */
        /**
         * Open the calendar as a popup.
         * @private
         * @return {?}
         */
        MdDatepicker.prototype._openAsPopup = /**
         * Open the calendar as a popup.
         * @private
         * @return {?}
         */
        function () {
            var _this = this;
            if (!this._calendarPortal) {
                this._calendarPortal = (/** @type {?} */ (new portal.ComponentPortal(MdDatepickerContent, this._viewContainerRef)));
            }
            if (!this._popupRef) {
                this._createPopup();
            }
            if (!this._popupRef.hasAttached()) {
                /** @type {?} */
                var componentRef = (/** @type {?} */ (this._popupRef.attach(this._calendarPortal)));
                componentRef.instance.datepicker = (/** @type {?} */ (this));
                // Update the position once the calendar has rendered.
                operators.first.call(this._ngZone.onStable).subscribe((/**
                 * @return {?}
                 */
                function () { return _this._popupRef.updatePosition(); }));
            }
            this._popupRef.backdropClick().subscribe((/**
             * @return {?}
             */
            function () { return _this.close(); }));
        };
        /** Create the popup. */
        /**
         * Create the popup.
         * @private
         * @return {?}
         */
        MdDatepicker.prototype._createPopup = /**
         * Create the popup.
         * @private
         * @return {?}
         */
        function () {
            /** @type {?} */
            var overlayState = new overlay.OverlayConfig();
            overlayState.positionStrategy = this._createPopupPositionStrategy();
            overlayState.hasBackdrop = true;
            overlayState.backdropClass = 'md-overlay-transparent-backdrop';
            overlayState.direction = this._dir ? this._dir.value : 'ltr';
            overlayState.scrollStrategy = this._scrollStrategy();
            this._popupRef = this._overlay.create(overlayState);
        };
        /** Create the popup PositionStrategy. */
        /**
         * Create the popup PositionStrategy.
         * @private
         * @return {?}
         */
        MdDatepicker.prototype._createPopupPositionStrategy = /**
         * Create the popup PositionStrategy.
         * @private
         * @return {?}
         */
        function () {
            return this._overlay.position()
                .connectedTo(this._datepickerInput.getPopupConnectionElementRef(), {
                originX: 'start', originY: 'bottom'
            }, { overlayX: 'start', overlayY: 'top' })
                .withFallbackPosition({ originX: 'start', originY: 'top' }, { overlayX: 'start', overlayY: 'bottom' })
                .withFallbackPosition({ originX: 'end', originY: 'bottom' }, { overlayX: 'end', overlayY: 'top' })
                .withFallbackPosition({ originX: 'end', originY: 'top' }, { overlayX: 'end', overlayY: 'bottom' });
        };
        MdDatepicker.decorators = [
            { type: core.Component, args: [{
                        selector: 'md-datepicker, mat-datepicker',
                        template: '',
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        encapsulation: core.ViewEncapsulation.None
                    }] }
        ];
        /** @nocollapse */
        MdDatepicker.ctorParameters = function () { return [
            { type: material.MatDialog },
            { type: overlay.Overlay },
            { type: core.NgZone },
            { type: core.ViewContainerRef },
            { type: undefined, decorators: [{ type: core.Inject, args: [MD_DATEPICKER_SCROLL_STRATEGY,] }] },
            { type: material.DateAdapter, decorators: [{ type: core.Optional }] },
            { type: bidi.Directionality, decorators: [{ type: core.Optional }] },
            { type: undefined, decorators: [{ type: core.Optional }, { type: core.Inject, args: [common.DOCUMENT,] }] }
        ]; };
        MdDatepicker.propDecorators = {
            subed: [{ type: core.Input }],
            startAt: [{ type: core.Input }],
            startView: [{ type: core.Input }],
            type: [{ type: core.Input }],
            touchUi: [{ type: core.Input }],
            disabled: [{ type: core.Input }],
            selectedChanged: [{ type: core.Output }]
        };
        return MdDatepicker;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        MdDatepicker.prototype._startAt;
        /**
         * The view that the calendar should start in.
         * @type {?}
         */
        MdDatepicker.prototype.startView;
        /** @type {?} */
        MdDatepicker.prototype.type;
        /**
         * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather
         * than a popup and elements have more padding to allow for bigger touch targets.
         * @type {?}
         */
        MdDatepicker.prototype.touchUi;
        /**
         * @type {?}
         * @private
         */
        MdDatepicker.prototype._disabled;
        /**
         * Emits new selected date when selected date changes.
         * @deprecated Switch to the `dateChange` and `dateInput` binding on the input element.
         * @type {?}
         */
        MdDatepicker.prototype.selectedChanged;
        /**
         * Whether the calendar is open.
         * @type {?}
         */
        MdDatepicker.prototype.opened;
        /**
         * The id for the datepicker calendar.
         * @type {?}
         */
        MdDatepicker.prototype.id;
        /**
         * @type {?}
         * @private
         */
        MdDatepicker.prototype._validSelected;
        /**
         * @type {?}
         * @private
         */
        MdDatepicker.prototype._validSubed;
        /**
         * A reference to the overlay when the calendar is opened as a popup.
         * @type {?}
         * @private
         */
        MdDatepicker.prototype._popupRef;
        /**
         * A reference to the dialog when the calendar is opened as a dialog.
         * @type {?}
         * @private
         */
        MdDatepicker.prototype._dialogRef;
        /**
         * A portal containing the calendar for this datepicker.
         * @type {?}
         * @private
         */
        MdDatepicker.prototype._calendarPortal;
        /**
         * The input element this datepicker is associated with.
         * @type {?}
         * @private
         */
        MdDatepicker.prototype._datepickerInput;
        /**
         * The element that was focused before the datepicker was opened.
         * @type {?}
         * @private
         */
        MdDatepicker.prototype._focusedElementBeforeOpen;
        /**
         * @type {?}
         * @private
         */
        MdDatepicker.prototype._inputSubscription;
        /** @type {?} */
        MdDatepicker.prototype.adapter;
        /**
         * @type {?}
         * @private
         */
        MdDatepicker.prototype._dialog;
        /**
         * @type {?}
         * @private
         */
        MdDatepicker.prototype._overlay;
        /**
         * @type {?}
         * @private
         */
        MdDatepicker.prototype._ngZone;
        /**
         * @type {?}
         * @private
         */
        MdDatepicker.prototype._viewContainerRef;
        /**
         * @type {?}
         * @private
         */
        MdDatepicker.prototype._scrollStrategy;
        /** @type {?} */
        MdDatepicker.prototype._dateAdapter;
        /**
         * @type {?}
         * @private
         */
        MdDatepicker.prototype._dir;
        /**
         * @type {?}
         * @private
         */
        MdDatepicker.prototype._document;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/datepicker-input.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var MD_DATEPICKER_VALUE_ACCESSOR = {
        provide: forms.NG_VALUE_ACCESSOR,
        useExisting: core.forwardRef((/**
         * @return {?}
         */
        function () { return MdDatepickerInput; })),
        multi: true
    };
    /** @type {?} */
    var MD_DATEPICKER_VALIDATORS = {
        provide: forms.NG_VALIDATORS,
        useExisting: core.forwardRef((/**
         * @return {?}
         */
        function () { return MdDatepickerInput; })),
        multi: true
    };
    /**
     * An event used for datepicker input and change events. We don't always have access to a native
     * input or change event because the event may have been triggered by the user clicking on the
     * calendar popup. For consistency, we always use MdDatepickerInputEvent instead.
     * @template D
     */
    var   /**
     * An event used for datepicker input and change events. We don't always have access to a native
     * input or change event because the event may have been triggered by the user clicking on the
     * calendar popup. For consistency, we always use MdDatepickerInputEvent instead.
     * @template D
     */
    MdDatepickerInputEvent = /** @class */ (function () {
        function MdDatepickerInputEvent(target, targetElement) {
            this.target = target;
            this.targetElement = targetElement;
            this.value = this.target.value;
        }
        return MdDatepickerInputEvent;
    }());
    if (false) {
        /**
         * The new value for the target datepicker input.
         * @type {?}
         */
        MdDatepickerInputEvent.prototype.value;
        /** @type {?} */
        MdDatepickerInputEvent.prototype.target;
        /** @type {?} */
        MdDatepickerInputEvent.prototype.targetElement;
    }
    /**
     * Directive used to connect an input to a MdDatepicker.
     * @template D
     */
    var MdDatepickerInput = /** @class */ (function () {
        function MdDatepickerInput(_elementRef, _renderer, _dateAdapter, _dateFormats, _mdFormField) {
            var _this = this;
            this._elementRef = _elementRef;
            this._renderer = _renderer;
            this._dateAdapter = _dateAdapter;
            this._dateFormats = _dateFormats;
            this._mdFormField = _mdFormField;
            /**
             * Emits when a `change` event is fired on this `<input>`.
             */
            this.dateChange = new core.EventEmitter();
            /**
             * Emits when an `input` event is fired on this `<input>`.
             */
            this.dateInput = new core.EventEmitter();
            /**
             * Emits when the value changes (either due to user input or programmatic change).
             */
            this._valueChange = new core.EventEmitter();
            this._onTouched = (/**
             * @return {?}
             */
            function () {
            });
            this._cvaOnChange = (/**
             * @return {?}
             */
            function () {
            });
            this._validatorOnChange = (/**
             * @return {?}
             */
            function () {
            });
            /**
             * The form control validator for whether the input parses.
             */
            this._parseValidator = (/**
             * @return {?}
             */
            function () {
                return _this._lastValueValid ?
                    null : { 'mdDatepickerParse': { 'text': _this._elementRef.nativeElement.value } };
            });
            /**
             * The form control validator for the min date.
             */
            this._minValidator = (/**
             * @param {?} control
             * @return {?}
             */
            function (control) {
                return (!_this.min || !control.value ||
                    _this._dateAdapter.compareDate(_this.min, control.value) <= 0) ?
                    null : { 'mdDatepickerMin': { 'min': _this.min, 'actual': control.value } };
            });
            /**
             * The form control validator for the max date.
             */
            this._maxValidator = (/**
             * @param {?} control
             * @return {?}
             */
            function (control) {
                return (!_this.max || !control.value ||
                    _this._dateAdapter.compareDate(_this.max, control.value) >= 0) ?
                    null : { 'mdDatepickerMax': { 'max': _this.max, 'actual': control.value } };
            });
            /**
             * The form control validator for the date filter.
             */
            this._filterValidator = (/**
             * @param {?} control
             * @return {?}
             */
            function (control) {
                return !_this._dateFilter || !control.value || _this._dateFilter(control.value) ?
                    null : { 'mdDatepickerFilter': true };
            });
            /**
             * The combined form control validator for this input.
             */
            this._validator = forms.Validators.compose([this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);
            /**
             * Whether the last value set on the input was valid.
             */
            this._lastValueValid = false;
            if (!this._dateAdapter) {
                throw createMissingDateImplError('DateAdapter');
            }
            if (!this._dateFormats) {
                throw createMissingDateImplError('MD_DATE_FORMATS');
            }
        }
        Object.defineProperty(MdDatepickerInput.prototype, "mdDatepicker", {
            /** The datepicker that this input is associated with. */
            set: /**
             * The datepicker that this input is associated with.
             * @param {?} value
             * @return {?}
             */
            function (value) {
                if (value) {
                    this._datepicker = value;
                    this._datepicker._registerInput(this);
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MdDatepickerInput.prototype, "matDatepicker", {
            set: /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this.mdDatepicker = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MdDatepickerInput.prototype, "mdDatepickerFilter", {
            set: /**
             * @param {?} filter
             * @return {?}
             */
            function (filter) {
                this._dateFilter = filter;
                this._validatorOnChange();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MdDatepickerInput.prototype, "matDatepickerFilter", {
            set: /**
             * @param {?} filter
             * @return {?}
             */
            function (filter) {
                this.mdDatepickerFilter = filter;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MdDatepickerInput.prototype, "value", {
            get: /**
             * @return {?}
             */
            function () {
                return this._value;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                if (value != null && !this._dateAdapter.isDateInstance(value)) {
                    throw Error('Datepicker: value not recognized as a date object by DateAdapter.');
                }
                this._lastValueValid = !value || this._dateAdapter.isValid(value);
                value = this._getValidDateOrNull(value);
                /** @type {?} */
                var oldDate = this.value;
                this._renderer.setProperty(this._elementRef.nativeElement, 'value', value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '');
                if (!this._dateAdapter.sameDate(oldDate, value)) {
                    this._value = value;
                    this._valueChange.emit(value);
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MdDatepickerInput.prototype, "min", {
            /** The minimum valid date. */
            get: /**
             * The minimum valid date.
             * @return {?}
             */
            function () {
                return this._min;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._min = value;
                this._validatorOnChange();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MdDatepickerInput.prototype, "max", {
            /** The maximum valid date. */
            get: /**
             * The maximum valid date.
             * @return {?}
             */
            function () {
                return this._max;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._max = value;
                this._validatorOnChange();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MdDatepickerInput.prototype, "disabled", {
            /** Whether the datepicker-input is disabled. */
            get: /**
             * Whether the datepicker-input is disabled.
             * @return {?}
             */
            function () {
                return this._disabled;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._disabled = coercion.coerceBooleanProperty(value);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        MdDatepickerInput.prototype.ngAfterContentInit = /**
         * @return {?}
         */
        function () {
            var _this = this;
            if (this._datepicker) {
                this._datepickerSubscription =
                    this._datepicker.selectedChanged.subscribe((/**
                     * @param {?} selected
                     * @return {?}
                     */
                    function (selected) {
                        _this.value = selected;
                        _this._cvaOnChange(selected);
                        _this._onTouched();
                        _this.dateInput.emit(new MdDatepickerInputEvent(_this, _this._elementRef.nativeElement));
                        _this.dateChange.emit(new MdDatepickerInputEvent(_this, _this._elementRef.nativeElement));
                    }));
            }
        };
        /**
         * @return {?}
         */
        MdDatepickerInput.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            if (this._datepickerSubscription) {
                this._datepickerSubscription.unsubscribe();
            }
        };
        /**
         * @param {?} fn
         * @return {?}
         */
        MdDatepickerInput.prototype.registerOnValidatorChange = /**
         * @param {?} fn
         * @return {?}
         */
        function (fn) {
            this._validatorOnChange = fn;
        };
        /**
         * @param {?} c
         * @return {?}
         */
        MdDatepickerInput.prototype.validate = /**
         * @param {?} c
         * @return {?}
         */
        function (c) {
            return this._validator ? this._validator(c) : null;
        };
        /**
         * Gets the element that the datepicker popup should be connected to.
         * @return The element to connect the popup to.
         */
        /**
         * Gets the element that the datepicker popup should be connected to.
         * @return {?} The element to connect the popup to.
         */
        MdDatepickerInput.prototype.getPopupConnectionElementRef = /**
         * Gets the element that the datepicker popup should be connected to.
         * @return {?} The element to connect the popup to.
         */
        function () {
            return this._mdFormField ? this._mdFormField.underlineRef : this._elementRef;
        };
        // Implemented as part of ControlValueAccessor
        // Implemented as part of ControlValueAccessor
        /**
         * @param {?} value
         * @return {?}
         */
        MdDatepickerInput.prototype.writeValue = 
        // Implemented as part of ControlValueAccessor
        /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.value = value;
        };
        // Implemented as part of ControlValueAccessor
        // Implemented as part of ControlValueAccessor
        /**
         * @param {?} fn
         * @return {?}
         */
        MdDatepickerInput.prototype.registerOnChange = 
        // Implemented as part of ControlValueAccessor
        /**
         * @param {?} fn
         * @return {?}
         */
        function (fn) {
            this._cvaOnChange = fn;
        };
        // Implemented as part of ControlValueAccessor
        // Implemented as part of ControlValueAccessor
        /**
         * @param {?} fn
         * @return {?}
         */
        MdDatepickerInput.prototype.registerOnTouched = 
        // Implemented as part of ControlValueAccessor
        /**
         * @param {?} fn
         * @return {?}
         */
        function (fn) {
            this._onTouched = fn;
        };
        // Implemented as part of ControlValueAccessor
        // Implemented as part of ControlValueAccessor
        /**
         * @param {?} disabled
         * @return {?}
         */
        MdDatepickerInput.prototype.setDisabledState = 
        // Implemented as part of ControlValueAccessor
        /**
         * @param {?} disabled
         * @return {?}
         */
        function (disabled) {
            this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', disabled);
        };
        /**
         * @param {?} event
         * @return {?}
         */
        MdDatepickerInput.prototype._onKeydown = /**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            if (event.altKey && event.keyCode === keycodes.DOWN_ARROW) {
                this._datepicker.open();
                event.preventDefault();
            }
        };
        /**
         * @param {?} value
         * @return {?}
         */
        MdDatepickerInput.prototype._onInput = /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            var date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);
            this._lastValueValid = !date || this._dateAdapter.isValid(date);
            date = this._getValidDateOrNull(date);
            this._cvaOnChange(date);
            this._valueChange.emit(date);
            this.dateInput.emit(new MdDatepickerInputEvent(this, this._elementRef.nativeElement));
        };
        /**
         * @return {?}
         */
        MdDatepickerInput.prototype._onChange = /**
         * @return {?}
         */
        function () {
            this.dateChange.emit(new MdDatepickerInputEvent(this, this._elementRef.nativeElement));
        };
        /**
         * @param obj The object to check.
         * @returns The given object if it is both a date instance and valid, otherwise null.
         */
        /**
         * @private
         * @param {?} obj The object to check.
         * @return {?} The given object if it is both a date instance and valid, otherwise null.
         */
        MdDatepickerInput.prototype._getValidDateOrNull = /**
         * @private
         * @param {?} obj The object to check.
         * @return {?} The given object if it is both a date instance and valid, otherwise null.
         */
        function (obj) {
            return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;
        };
        MdDatepickerInput.decorators = [
            { type: core.Directive, args: [{
                        selector: 'input[mdDatepicker], input[matDatepicker]',
                        providers: [MD_DATEPICKER_VALUE_ACCESSOR, MD_DATEPICKER_VALIDATORS],
                        host: {
                            '[attr.aria-haspopup]': 'true',
                            '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',
                            '[attr.min]': 'min ? _dateAdapter.getISODateString(min) : null',
                            '[attr.max]': 'max ? _dateAdapter.getISODateString(max) : null',
                            '[disabled]': 'disabled',
                            '(input)': '_onInput($event.target.value)',
                            '(change)': '_onChange()',
                            '(blur)': '_onTouched()',
                            '(keydown)': '_onKeydown($event)',
                        },
                        exportAs: 'mdDatepickerInput',
                    },] }
        ];
        /** @nocollapse */
        MdDatepickerInput.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: core.Renderer2 },
            { type: material.DateAdapter, decorators: [{ type: core.Optional }] },
            { type: undefined, decorators: [{ type: core.Optional }, { type: core.Inject, args: [material.MAT_DATE_FORMATS,] }] },
            { type: material.MatFormField, decorators: [{ type: core.Optional }] }
        ]; };
        MdDatepickerInput.propDecorators = {
            mdDatepicker: [{ type: core.Input }],
            matDatepicker: [{ type: core.Input }],
            mdDatepickerFilter: [{ type: core.Input }],
            matDatepickerFilter: [{ type: core.Input }],
            value: [{ type: core.Input }],
            min: [{ type: core.Input }],
            max: [{ type: core.Input }],
            disabled: [{ type: core.Input }],
            dateChange: [{ type: core.Output }],
            dateInput: [{ type: core.Output }]
        };
        return MdDatepickerInput;
    }());
    if (false) {
        /** @type {?} */
        MdDatepickerInput.prototype._datepicker;
        /** @type {?} */
        MdDatepickerInput.prototype._dateFilter;
        /**
         * The value of the input.
         * @type {?}
         */
        MdDatepickerInput.prototype._value;
        /**
         * @type {?}
         * @private
         */
        MdDatepickerInput.prototype._min;
        /**
         * @type {?}
         * @private
         */
        MdDatepickerInput.prototype._max;
        /**
         * @type {?}
         * @private
         */
        MdDatepickerInput.prototype._disabled;
        /**
         * Emits when a `change` event is fired on this `<input>`.
         * @type {?}
         */
        MdDatepickerInput.prototype.dateChange;
        /**
         * Emits when an `input` event is fired on this `<input>`.
         * @type {?}
         */
        MdDatepickerInput.prototype.dateInput;
        /**
         * Emits when the value changes (either due to user input or programmatic change).
         * @type {?}
         */
        MdDatepickerInput.prototype._valueChange;
        /** @type {?} */
        MdDatepickerInput.prototype._onTouched;
        /**
         * @type {?}
         * @private
         */
        MdDatepickerInput.prototype._cvaOnChange;
        /**
         * @type {?}
         * @private
         */
        MdDatepickerInput.prototype._validatorOnChange;
        /**
         * @type {?}
         * @private
         */
        MdDatepickerInput.prototype._datepickerSubscription;
        /**
         * The form control validator for whether the input parses.
         * @type {?}
         * @private
         */
        MdDatepickerInput.prototype._parseValidator;
        /**
         * The form control validator for the min date.
         * @type {?}
         * @private
         */
        MdDatepickerInput.prototype._minValidator;
        /**
         * The form control validator for the max date.
         * @type {?}
         * @private
         */
        MdDatepickerInput.prototype._maxValidator;
        /**
         * The form control validator for the date filter.
         * @type {?}
         * @private
         */
        MdDatepickerInput.prototype._filterValidator;
        /**
         * The combined form control validator for this input.
         * @type {?}
         * @private
         */
        MdDatepickerInput.prototype._validator;
        /**
         * Whether the last value set on the input was valid.
         * @type {?}
         * @private
         */
        MdDatepickerInput.prototype._lastValueValid;
        /**
         * @type {?}
         * @private
         */
        MdDatepickerInput.prototype._elementRef;
        /**
         * @type {?}
         * @private
         */
        MdDatepickerInput.prototype._renderer;
        /**
         * @type {?}
         * @private
         */
        MdDatepickerInput.prototype._dateAdapter;
        /**
         * @type {?}
         * @private
         */
        MdDatepickerInput.prototype._dateFormats;
        /**
         * @type {?}
         * @private
         */
        MdDatepickerInput.prototype._mdFormField;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/datepicker-toggle.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @template D
     */
    var MdDatepickerToggle = /** @class */ (function () {
        function MdDatepickerToggle(_intl, changeDetectorRef) {
            this._intl = _intl;
            this._intlChanges = _intl.changes.subscribe((/**
             * @return {?}
             */
            function () { return changeDetectorRef.markForCheck(); }));
        }
        Object.defineProperty(MdDatepickerToggle.prototype, "disabled", {
            /** Whether the toggle button is disabled. */
            get: /**
             * Whether the toggle button is disabled.
             * @return {?}
             */
            function () {
                return this._disabled === undefined ? this.datepicker.disabled : this._disabled;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._disabled = coercion.coerceBooleanProperty(value);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        MdDatepickerToggle.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            this._intlChanges.unsubscribe();
        };
        /**
         * @param {?} event
         * @return {?}
         */
        MdDatepickerToggle.prototype._open = /**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            if (this.datepicker && !this.disabled) {
                this.datepicker.open();
                event.stopPropagation();
            }
        };
        MdDatepickerToggle.decorators = [
            { type: core.Component, args: [{
                        selector: 'md-datepicker-toggle, mat-datepicker-toggle',
                        template: "<button mat-icon-button type=\"button\" [attr.aria-label]=\"_intl.openCalendarLabel\"\r\n        [disabled]=\"disabled\" (click)=\"_open($event)\">\r\n  <!-- <mat-icon>\r\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"100%\" height=\"100%\"\r\n         fill=\"currentColor\" style=\"vertical-align: top\" focusable=\"false\">\r\n      <path d=\"M0 0h24v24H0z\" fill=\"none\"/>\r\n      <path d=\"M19 3h-1V1h-2v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V8h14v11zM7 10h5v5H7z\"/>\r\n    </svg>\r\n  </mat-icon> -->\r\n</button>\r\n",
                        host: {
                            'class': 'mat-datepicker-toggle',
                        },
                        encapsulation: core.ViewEncapsulation.None,
                        changeDetection: core.ChangeDetectionStrategy.OnPush
                    }] }
        ];
        /** @nocollapse */
        MdDatepickerToggle.ctorParameters = function () { return [
            { type: MdDatepickerIntl },
            { type: core.ChangeDetectorRef }
        ]; };
        MdDatepickerToggle.propDecorators = {
            datepicker: [{ type: core.Input, args: ['for',] }],
            disabled: [{ type: core.Input }]
        };
        return MdDatepickerToggle;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        MdDatepickerToggle.prototype._intlChanges;
        /**
         * Datepicker instance that the button will toggle.
         * @type {?}
         */
        MdDatepickerToggle.prototype.datepicker;
        /**
         * @type {?}
         * @private
         */
        MdDatepickerToggle.prototype._disabled;
        /** @type {?} */
        MdDatepickerToggle.prototype._intl;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/locale_changer.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * An internal component used to display a single year in the datepicker.
     * \@docs-private
     * @template D
     */
    var MdLocaleChanger = /** @class */ (function () {
        function MdLocaleChanger(_dateAdapter, _dateFormats) {
            var _this = this;
            this._dateAdapter = _dateAdapter;
            this._dateFormats = _dateFormats;
            if (!this._dateAdapter) {
                throw createMissingDateImplError('DateAdapter');
            }
            if (!this._dateFormats) {
                throw createMissingDateImplError('MD_DATE_FORMATS');
            }
            this.any = (/** @type {?} */ (_dateAdapter));
            this.mustDestroy = ((/** @type {?} */ (_dateFormats)))._lastChanges.subscribe((/**
             * @param {?} v
             * @return {?}
             */
            function (v) {
                _this.lang = v;
            }));
        }
        /**
         * @return {?}
         */
        MdLocaleChanger.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            this.mustDestroy.unsubscribe();
        };
        // change locale function()
        // change locale function()
        /**
         * @return {?}
         */
        MdLocaleChanger.prototype._changeLocale = 
        // change locale function()
        /**
         * @return {?}
         */
        function () {
            this.any.changeLocale();
        };
        MdLocaleChanger.decorators = [
            { type: core.Component, args: [{
                        moduleId: module.id,
                        selector: 'md-locale-changer',
                        template: "\n        <mat-button-toggle-group #group=\"matButtonToggleGroup\" (change)=\"_changeLocale()\" [value]=\"lang\">\n            <mat-button-toggle value=\"fa\">\n                \u0634\u0645\u0633\u06CC\n            </mat-button-toggle>\n            <mat-button-toggle value=\"en\">\n                \u0645\u06CC\u0644\u0627\u062F\u06CC\n            </mat-button-toggle>\n        </mat-button-toggle-group>\n    ",
                        encapsulation: core.ViewEncapsulation.None,
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        styles: [".mat-button-toggle-group .mat-button-toggle{font-size:11px}.mat-button-toggle-group .mat-button-toggle .mat-button-toggle-label-content{line-height:26px}"]
                    }] }
        ];
        /** @nocollapse */
        MdLocaleChanger.ctorParameters = function () { return [
            { type: material.DateAdapter, decorators: [{ type: core.Optional }] },
            { type: undefined, decorators: [{ type: core.Optional }, { type: core.Inject, args: [material.MAT_DATE_FORMATS,] }] }
        ]; };
        return MdLocaleChanger;
    }());
    if (false) {
        /** @type {?} */
        MdLocaleChanger.prototype.any;
        /** @type {?} */
        MdLocaleChanger.prototype.lang;
        /** @type {?} */
        MdLocaleChanger.prototype.mustDestroy;
        /** @type {?} */
        MdLocaleChanger.prototype._dateAdapter;
        /**
         * @type {?}
         * @private
         */
        MdLocaleChanger.prototype._dateFormats;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/injectors.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var MAT_DATE_LOCALE = new core.InjectionToken('MAT_DATE_LOCALE');

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/jalali-date-adapter.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var minmin = jMoment;
    var JalaliMomentDateAdapter = /** @class */ (function (_super) {
        __extends(JalaliMomentDateAdapter, _super);
        function JalaliMomentDateAdapter(matDateLocale) {
            var _this = _super.call(this) || this;
            _this.setLocale(matDateLocale || minmin.locale('fa'));
            minmin.loadPersian();
            return _this;
        }
        /**
         * @return {?}
         */
        JalaliMomentDateAdapter.prototype.invalid = /**
         * @return {?}
         */
        function () {
            return (/** @type {?} */ ('hi'));
        };
        /**
         * @param {?} date
         * @return {?}
         */
        JalaliMomentDateAdapter.prototype.toIso8601 = /**
         * @param {?} date
         * @return {?}
         */
        function (date) {
            return 'hi';
        };
        /**
         * returns year in jalali calendar system.
         */
        /**
         * returns year in jalali calendar system.
         * @param {?} date
         * @return {?}
         */
        JalaliMomentDateAdapter.prototype.getYear = /**
         * returns year in jalali calendar system.
         * @param {?} date
         * @return {?}
         */
        function (date) {
            return this.clone(date).jYear();
        };
        /**
         * returns month in jalali calendar system.
         */
        /**
         * returns month in jalali calendar system.
         * @param {?} date
         * @return {?}
         */
        JalaliMomentDateAdapter.prototype.getMonth = /**
         * returns month in jalali calendar system.
         * @param {?} date
         * @return {?}
         */
        function (date) {
            return this.clone(date).jMonth();
        };
        /**
         * returns day in jalali calendar system.
         */
        /**
         * returns day in jalali calendar system.
         * @param {?} date
         * @return {?}
         */
        JalaliMomentDateAdapter.prototype.getDate = /**
         * returns day in jalali calendar system.
         * @param {?} date
         * @return {?}
         */
        function (date) {
            return this.clone(date).jDate();
        };
        /**
         * returns Day Of Week in jalali calendar system.
         */
        /**
         * returns Day Of Week in jalali calendar system.
         * @param {?} date
         * @return {?}
         */
        JalaliMomentDateAdapter.prototype.getDayOfWeek = /**
         * returns Day Of Week in jalali calendar system.
         * @param {?} date
         * @return {?}
         */
        function (date) {
            return this.clone(date).day();
        };
        /**
         * returns Month Names in jalali calendar system.
         * most of the time we use long format. short or narrow format for month names is a little odd.
         */
        /**
         * returns Month Names in jalali calendar system.
         * most of the time we use long format. short or narrow format for month names is a little odd.
         * @param {?} style
         * @return {?}
         */
        JalaliMomentDateAdapter.prototype.getMonthNames = /**
         * returns Month Names in jalali calendar system.
         * most of the time we use long format. short or narrow format for month names is a little odd.
         * @param {?} style
         * @return {?}
         */
        function (style) {
            /** @type {?} */
            var r = [];
            minmin.loadPersian({ dialect: 'persian', usePersianDigits: true });
            /** @type {?} */
            var l = minmin().localeData();
            if (style === 'long' || style === 'short') {
                Object.keys(l).forEach((/**
                 * @param {?} key
                 * @return {?}
                 */
                function (key) {
                    if (key === '_jMonths') {
                        /** @type {?} */
                        var values = l[key];
                        for (var index = 0; index < values.length; index++) {
                            r.push(values[index]);
                        }
                    }
                }));
            }
            else {
                Object.keys(l).forEach((/**
                 * @param {?} key
                 * @return {?}
                 */
                function (key) {
                    if (key === '_jMonthsShort') {
                        /** @type {?} */
                        var values = l[key];
                        for (var index = 0; index < values.length; index++) {
                            r.push(values[index]);
                        }
                    }
                }));
            }
            return r;
            // switch (style) {
            //     case 'long':
            //         const mlong = (minmin().localeData() as any)._jMonths.slice(0);
            //         console.log(mlong);
            //         return mlong;
            //     case 'short':
            //         const mshort = (minmin().localeData() as any)._jMonthsShort.slice(0);
            //         console.log('mshort: ', mshort);
            //         return mshort;
            //     case 'narrow':
            //         return (minmin().localeData() as any)._jMonthsShort.slice(0);
            // }
        };
        /**
         * borrowed from angular material code.
         */
        /**
         * borrowed from angular material code.
         * @return {?}
         */
        JalaliMomentDateAdapter.prototype.getDateNames = /**
         * borrowed from angular material code.
         * @return {?}
         */
        function () {
            return this.range(31, (/**
             * @param {?} i
             * @return {?}
             */
            function (i) { return String(i + 1); }));
        };
        /**
         * returns Day Of Week names in jalali calendar system.
         */
        /**
         * returns Day Of Week names in jalali calendar system.
         * @param {?} style
         * @return {?}
         */
        JalaliMomentDateAdapter.prototype.getDayOfWeekNames = /**
         * returns Day Of Week names in jalali calendar system.
         * @param {?} style
         * @return {?}
         */
        function (style) {
            switch (style) {
                case 'long':
                    return minmin().localeData().weekdays().slice(0);
                case 'short':
                    return minmin().localeData().weekdaysShort().slice(0);
                case 'narrow':
                    return minmin().localeData().weekdaysMin().slice(0);
            }
        };
        /**
         * returns year in jalali calendar system.
         */
        /**
         * returns year in jalali calendar system.
         * @param {?} date
         * @return {?}
         */
        JalaliMomentDateAdapter.prototype.getYearName = /**
         * returns year in jalali calendar system.
         * @param {?} date
         * @return {?}
         */
        function (date) {
            return this.clone(date).jYear().toString();
        };
        /**
         * returns first day of week in jalali calendar system.
         * first day of week is saturday, شنبه
         */
        /**
         * returns first day of week in jalali calendar system.
         * first day of week is saturday, شنبه
         * @return {?}
         */
        JalaliMomentDateAdapter.prototype.getFirstDayOfWeek = /**
         * returns first day of week in jalali calendar system.
         * first day of week is saturday, شنبه
         * @return {?}
         */
        function () {
            return 6;
        };
        /**
         * returns Number of Days In Month in jalali calendar system.
         */
        /**
         * returns Number of Days In Month in jalali calendar system.
         * @param {?} date
         * @param {?=} fa
         * @return {?}
         */
        JalaliMomentDateAdapter.prototype.getNumDaysInMonth = /**
         * returns Number of Days In Month in jalali calendar system.
         * @param {?} date
         * @param {?=} fa
         * @return {?}
         */
        function (date, fa) {
            if (date['_d']) {
                return minmin.jDaysInMonth(this.getYear(date['_d']), this.getMonth(date['_d']));
            }
            return minmin.jDaysInMonth(this.getYear(date), this.getMonth(date));
        };
        /**
         * @param {?} date
         * @return {?}
         */
        JalaliMomentDateAdapter.prototype.clone = /**
         * @param {?} date
         * @return {?}
         */
        function (date) {
            // return date.clone().locale(this.locale);
            return minmin(date);
        };
        /**
         * @param {?} year
         * @param {?} month
         * @param {?} date
         * @return {?}
         */
        JalaliMomentDateAdapter.prototype.createDate = /**
         * @param {?} year
         * @param {?} month
         * @param {?} date
         * @return {?}
         */
        function (year, month, date) {
            return minmin().jYear(year).jMonth(month).jDate(date);
        };
        /**
         * @return {?}
         */
        JalaliMomentDateAdapter.prototype.today = /**
         * @return {?}
         */
        function () {
            return minmin();
        };
        /**
         * @param {?} value
         * @param {?} parseFormat
         * @return {?}
         */
        JalaliMomentDateAdapter.prototype.parse = /**
         * @param {?} value
         * @param {?} parseFormat
         * @return {?}
         */
        function (value, parseFormat) {
            if (value && typeof value === 'string') {
                return minmin(value, parseFormat, this.locale);
            }
            return value ? minmin(value).locale(this.locale) : null;
        };
        /**
         * @param {?} date
         * @param {?} displayFormat
         * @return {?}
         */
        JalaliMomentDateAdapter.prototype.format = /**
         * @param {?} date
         * @param {?} displayFormat
         * @return {?}
         */
        function (date, displayFormat) {
            return this.clone(date).format(displayFormat);
        };
        /**
         * @param {?} date
         * @param {?} years
         * @return {?}
         */
        JalaliMomentDateAdapter.prototype.addCalendarYears = /**
         * @param {?} date
         * @param {?} years
         * @return {?}
         */
        function (date, years) {
            return this.clone(date).add(years, 'jYear');
        };
        /**
         * @param {?} date
         * @param {?} months
         * @return {?}
         */
        JalaliMomentDateAdapter.prototype.addCalendarMonths = /**
         * @param {?} date
         * @param {?} months
         * @return {?}
         */
        function (date, months) {
            return this.clone(date).add((/** @type {?} */ (months)), 'jmonth');
        };
        /**
         * @param {?} date
         * @param {?} days
         * @return {?}
         */
        JalaliMomentDateAdapter.prototype.addCalendarDays = /**
         * @param {?} date
         * @param {?} days
         * @return {?}
         */
        function (date, days) {
            return this.clone(date).add(days, 'day');
        };
        /**
         * @param {?} date
         * @return {?}
         */
        JalaliMomentDateAdapter.prototype.getISODateString = /**
         * @param {?} date
         * @return {?}
         */
        function (date) {
            return this.clone(date).format('jYYYY-jMM-jDD');
        };
        /**
         * @param {?} obj
         * @return {?}
         */
        JalaliMomentDateAdapter.prototype.isDateInstance = /**
         * @param {?} obj
         * @return {?}
         */
        function (obj) {
            return minmin.isMoment(obj);
        };
        /**
         * @param {?} date
         * @return {?}
         */
        JalaliMomentDateAdapter.prototype.isValid = /**
         * @param {?} date
         * @return {?}
         */
        function (date) {
            return this.clone(date).isValid();
        };
        /**
         * @template T
         * @param {?} length
         * @param {?} valueFunction
         * @return {?}
         */
        JalaliMomentDateAdapter.prototype.range = /**
         * @template T
         * @param {?} length
         * @param {?} valueFunction
         * @return {?}
         */
        function (length, valueFunction) {
            /** @type {?} */
            var valuesArray = Array(length);
            for (var i = 0; i < length; i++) {
                valuesArray[i] = valueFunction(i);
            }
            return valuesArray;
        };
        /** @nocollapse */
        JalaliMomentDateAdapter.ctorParameters = function () { return [
            { type: String, decorators: [{ type: core.Optional }, { type: core.Inject, args: [MAT_DATE_LOCALE,] }] }
        ]; };
        return JalaliMomentDateAdapter;
    }(material.DateAdapter));

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/object-extend.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Extends an object with the *enumerable* and *own* properties of one or more source objects,
     * similar to Object.assign.
     *
     * @param {?} dest The object which will have properties copied to it.
     * @param {...?} sources The source objects from which properties will be copied.
     * @return {?}
     */
    function extendObject(dest) {
        var e_1, _a;
        var sources = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            sources[_i - 1] = arguments[_i];
        }
        if (dest == null) {
            throw TypeError('Cannot convert undefined or null to object');
        }
        try {
            for (var sources_1 = __values(sources), sources_1_1 = sources_1.next(); !sources_1_1.done; sources_1_1 = sources_1.next()) {
                var source = sources_1_1.value;
                if (source != null) {
                    for (var key in source) {
                        if (source.hasOwnProperty(key)) {
                            dest[key] = source[key];
                        }
                    }
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (sources_1_1 && !sources_1_1.done && (_a = sources_1.return)) _a.call(sources_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return dest;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/moment-date-adapter.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    // TODO(mmalerba): Remove when we no longer support safari 9.
    /**
     * Whether the browser supports the Intl API.
     * @type {?}
     */
    var SUPPORTS_INTL_API = typeof Intl != 'undefined';
    /**
     * The default month names to use if Intl API is not available.
     * @type {?}
     */
    var DEFAULT_MONTH_NAMES = {
        'long': [
            'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',
            'October', 'November', 'December'
        ],
        'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
        'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']
    };
    var ɵ0 = /**
     * @param {?} i
     * @return {?}
     */
    function (i) { return String(i + 1); };
    /**
     * The default date names to use if Intl API is not available.
     * @type {?}
     */
    var DEFAULT_DATE_NAMES = range(31, (ɵ0));
    /**
     * The default day of the week names to use if Intl API is not available.
     * @type {?}
     */
    var DEFAULT_DAY_OF_WEEK_NAMES = {
        'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
        'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
        'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']
    };
    /**
     * Creates an array and fills it with values.
     * @template T
     * @param {?} length
     * @param {?} valueFunction
     * @return {?}
     */
    function range(length, valueFunction) {
        /** @type {?} */
        var valuesArray = Array(length);
        for (var i = 0; i < length; i++) {
            valuesArray[i] = valueFunction(i);
        }
        return valuesArray;
    }
    /**
     * Adapts the native JS Date for use with cdk-based components that work with dates.
     */
    var NativeDateAdapter = /** @class */ (function (_super) {
        __extends(NativeDateAdapter, _super);
        function NativeDateAdapter(localeId) {
            var _this = _super.call(this) || this;
            _this.lang = 'fa';
            _this.langSubject = new rxjs.Subject();
            _this.JDateAdapter = new JalaliMomentDateAdapter('fa');
            /**
             * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.
             * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off
             * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`
             * will produce `'8/13/1800'`.
             */
            _this.useUtcForDisplay = true;
            _super.prototype.setLocale.call(_this, localeId);
            return _this;
        }
        /**
         * @return {?}
         */
        NativeDateAdapter.prototype.invalid = /**
         * @return {?}
         */
        function () {
            return new Date();
        };
        /**
         * @param {?} date
         * @return {?}
         */
        NativeDateAdapter.prototype.toIso8601 = /**
         * @param {?} date
         * @return {?}
         */
        function (date) {
            return 'hi';
        };
        /**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        NativeDateAdapter.prototype.sameDate = /**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        function (a, b) {
            return false;
        };
        /**
         * @param {?} v
         * @return {?}
         */
        NativeDateAdapter.prototype.setLocale = /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            _super.prototype.setLocale.call(this, v);
            if (this.lang != 'fa') {
                this.lang = 'fa';
                this.langSubject.next('fa');
            }
            else {
                this.lang = 'en';
                this.langSubject.next('en');
            }
        };
        /**
         * @return {?}
         */
        NativeDateAdapter.prototype.getLang = /**
         * @return {?}
         */
        function () {
            return this.langSubject;
        };
        /**
         * @return {?}
         */
        NativeDateAdapter.prototype.changeLocale = /**
         * @return {?}
         */
        function () {
            if (this.lang != 'fa') {
                this.setLocale('fa');
            }
            else {
                this.setLocale('en');
            }
        };
        /**
         * @param {?} date
         * @param {?=} force
         * @return {?}
         */
        NativeDateAdapter.prototype.getYear = /**
         * @param {?} date
         * @param {?=} force
         * @return {?}
         */
        function (date, force) {
            if (this.lang == 'fa' && !force) {
                return this.JDateAdapter.getYear((/** @type {?} */ (date)));
            }
            if (date._d) {
                return date._d.getFullYear();
            }
            if (!date.getFullYear) {
                debugger;
            }
            return date.getFullYear();
        };
        /**
         * @param {?} date
         * @param {?=} force
         * @return {?}
         */
        NativeDateAdapter.prototype.getMonth = /**
         * @param {?} date
         * @param {?=} force
         * @return {?}
         */
        function (date, force) {
            if (this.lang == 'fa' && !force) {
                return this.JDateAdapter.getMonth((/** @type {?} */ (date)));
            }
            if (date._d) {
                return date._d.getMonth();
            }
            return date.getMonth();
        };
        /**
         * @param {?} date
         * @param {?=} force
         * @return {?}
         */
        NativeDateAdapter.prototype.getDate = /**
         * @param {?} date
         * @param {?=} force
         * @return {?}
         */
        function (date, force) {
            if (this.lang == 'fa' && !force) {
                return this.JDateAdapter.getDate((/** @type {?} */ (date)));
            }
            if (date._d) {
                return date._d.getDate();
            }
            return date.getDate();
        };
        /**
         * @param {?} date
         * @param {?=} force
         * @return {?}
         */
        NativeDateAdapter.prototype.getDayOfWeek = /**
         * @param {?} date
         * @param {?=} force
         * @return {?}
         */
        function (date, force) {
            if (this.lang == 'fa' && !force) {
                return this.JDateAdapter.getDayOfWeek((/** @type {?} */ (date)));
            }
            return date.getDay();
        };
        /**
         * @param {?} style
         * @param {?=} force
         * @return {?}
         */
        NativeDateAdapter.prototype.getMonthNames = /**
         * @param {?} style
         * @param {?=} force
         * @return {?}
         */
        function (style, force) {
            var _this = this;
            if (this.lang == 'fa' && !force) {
                return this.JDateAdapter.getMonthNames(style);
            }
            if (SUPPORTS_INTL_API) {
                /** @type {?} */
                var dtf_1 = new Intl.DateTimeFormat(this.locale, { month: style });
                return range(12, (/**
                 * @param {?} i
                 * @return {?}
                 */
                function (i) { return _this._stripDirectionalityCharacters(dtf_1.format(new Date(2017, i, 1))); }));
            }
            return DEFAULT_MONTH_NAMES[style];
        };
        /**
         * @param {?=} force
         * @return {?}
         */
        NativeDateAdapter.prototype.getDateNames = /**
         * @param {?=} force
         * @return {?}
         */
        function (force) {
            var _this = this;
            if (this.lang == 'fa' && !force) {
                return this.JDateAdapter.getDateNames();
            }
            if (SUPPORTS_INTL_API) {
                /** @type {?} */
                var dtf_2 = new Intl.DateTimeFormat(this.locale, { day: 'numeric' });
                return range(31, (/**
                 * @param {?} i
                 * @return {?}
                 */
                function (i) { return _this._stripDirectionalityCharacters(dtf_2.format(new Date(2017, 0, i + 1))); }));
            }
            return DEFAULT_DATE_NAMES;
        };
        /**
         * @param {?} style
         * @param {?=} force
         * @return {?}
         */
        NativeDateAdapter.prototype.getDayOfWeekNames = /**
         * @param {?} style
         * @param {?=} force
         * @return {?}
         */
        function (style, force) {
            var _this = this;
            if (this.lang == 'fa' && !force) {
                return this.JDateAdapter.getDayOfWeekNames(style);
            }
            if (SUPPORTS_INTL_API) {
                /** @type {?} */
                var dtf_3 = new Intl.DateTimeFormat(this.locale, { weekday: style });
                return range(7, (/**
                 * @param {?} i
                 * @return {?}
                 */
                function (i) { return _this._stripDirectionalityCharacters(dtf_3.format(new Date(2017, 0, i + 1))); }));
            }
            return DEFAULT_DAY_OF_WEEK_NAMES[style];
        };
        /**
         * @param {?} date
         * @param {?=} force
         * @return {?}
         */
        NativeDateAdapter.prototype.getYearName = /**
         * @param {?} date
         * @param {?=} force
         * @return {?}
         */
        function (date, force) {
            if (this.lang == 'fa' && !force) {
                return this.JDateAdapter.getYearName((/** @type {?} */ (date)));
            }
            if (SUPPORTS_INTL_API) {
                /** @type {?} */
                var dtf = new Intl.DateTimeFormat(this.locale, { year: 'numeric' });
                return this._stripDirectionalityCharacters(dtf.format(date));
            }
            return String(this.getYear(date));
        };
        /**
         * @param {?=} force
         * @return {?}
         */
        NativeDateAdapter.prototype.getFirstDayOfWeek = /**
         * @param {?=} force
         * @return {?}
         */
        function (force) {
            if (this.lang == 'fa' && !force) {
                return this.JDateAdapter.getFirstDayOfWeek();
            }
            // We can't tell using native JS Date what the first day of the week is, we default to Sunday.
            return 0;
        };
        /**
         * @param {?} date
         * @param {?=} force
         * @return {?}
         */
        NativeDateAdapter.prototype.getNumDaysInMonth = /**
         * @param {?} date
         * @param {?=} force
         * @return {?}
         */
        function (date, force) {
            if (this.lang == 'fa' && !force) {
                return this.JDateAdapter.getNumDaysInMonth((/** @type {?} */ (date)), 'fa');
            }
            return this.getDate(this._createDateWithOverflow(this.getYear(date), this.getMonth(date) + 1, 0));
        };
        /**
         * @param {?} date
         * @return {?}
         */
        NativeDateAdapter.prototype.clone = /**
         * @param {?} date
         * @return {?}
         */
        function (date) {
            if (this.lang == 'fa') {
                return (/** @type {?} */ ((this.JDateAdapter.clone((/** @type {?} */ (date))))));
            }
            return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));
        };
        /**
         * @param {?} year
         * @param {?} month
         * @param {?} date
         * @return {?}
         */
        NativeDateAdapter.prototype.createDate = /**
         * @param {?} year
         * @param {?} month
         * @param {?} date
         * @return {?}
         */
        function (year, month, date) {
            if (this.lang == 'fa') {
                return (/** @type {?} */ ((this.JDateAdapter.createDate(year, month, date))));
            }
            // Check for invalid month and date (except upper bound on date which we have to check after
            // creating the Date).
            if (month < 0 || month > 11) {
                throw Error("Invalid month index \"" + month + "\". Month index has to be between 0 and 11.");
            }
            if (date < 1) {
                throw Error("Invalid date \"" + date + "\". Date has to be greater than 0.");
            }
            /** @type {?} */
            var result = this._createDateWithOverflow(year, month, date);
            // Check that the date wasn't above the upper bound for the month, causing the month to overflow
            if (result.getMonth() != month) {
                throw Error("Invalid date \"" + date + "\" for month with index \"" + month + "\".");
            }
            return result;
        };
        /**
         * @return {?}
         */
        NativeDateAdapter.prototype.today = /**
         * @return {?}
         */
        function () {
            if (this.lang == 'fa') {
                return (/** @type {?} */ ((this.JDateAdapter.today())));
            }
            return new Date();
        };
        /**
         * @param {?} value
         * @return {?}
         */
        NativeDateAdapter.prototype.parse = /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (this.lang == 'fa') {
                return (/** @type {?} */ (this.JDateAdapter.parse(value, [])));
            }
            // We have no way using the native JS Date to set the parse format or locale, so we ignore these
            // parameters.
            if (typeof value == 'number') {
                return new Date(value);
            }
            return value ? new Date(Date.parse(value)) : null;
        };
        /**
         * @param {?} date
         * @param {?} displayFormat
         * @return {?}
         */
        NativeDateAdapter.prototype.format = /**
         * @param {?} date
         * @param {?} displayFormat
         * @return {?}
         */
        function (date, displayFormat) {
            if (this.lang == 'fa') {
                return this.JDateAdapter.format((/** @type {?} */ (date)), displayFormat);
            }
            if (!this.isValid(date)) {
                throw Error('NativeDateAdapter: Cannot format invalid date.');
            }
            if (SUPPORTS_INTL_API) {
                if (this.useUtcForDisplay) {
                    if (date._d) {
                        date = new Date(Date.UTC(date._d.getFullYear(), date._d.getMonth(), date._d.getDate(), date._d.getHours(), date._d.getMinutes(), date._d.getSeconds(), date._d.getMilliseconds()));
                        displayFormat = extendObject({}, displayFormat, { timeZone: 'utc' });
                    }
                    else {
                        date = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));
                        displayFormat = extendObject({}, displayFormat, { timeZone: 'utc' });
                    }
                }
                /** @type {?} */
                var dtf = new Intl.DateTimeFormat(this.locale, displayFormat);
                return this._stripDirectionalityCharacters(dtf.format(date));
            }
            return this._stripDirectionalityCharacters(date.toDateString());
        };
        /**
         * @param {?} date
         * @param {?} years
         * @return {?}
         */
        NativeDateAdapter.prototype.addCalendarYears = /**
         * @param {?} date
         * @param {?} years
         * @return {?}
         */
        function (date, years) {
            if (this.lang == 'fa') {
                return (/** @type {?} */ (this.JDateAdapter.addCalendarYears((/** @type {?} */ (date)), years)));
            }
            return this.addCalendarMonths(date, years * 12);
        };
        /**
         * @param {?} date
         * @param {?} months
         * @return {?}
         */
        NativeDateAdapter.prototype.addCalendarMonths = /**
         * @param {?} date
         * @param {?} months
         * @return {?}
         */
        function (date, months) {
            if (this.lang == 'fa') {
                return (/** @type {?} */ (this.JDateAdapter.addCalendarMonths((/** @type {?} */ (date)), months)));
            }
            /** @type {?} */
            var newDate = this._createDateWithOverflow(this.getYear(date), this.getMonth(date) + months, this.getDate(date));
            // It's possible to wind up in the wrong month if the original month has more days than the new
            // month. In this case we want to go to the last day of the desired month.
            // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't
            // guarantee this.
            if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {
                newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);
            }
            return newDate;
        };
        /**
         * @param {?} date
         * @param {?} days
         * @return {?}
         */
        NativeDateAdapter.prototype.addCalendarDays = /**
         * @param {?} date
         * @param {?} days
         * @return {?}
         */
        function (date, days) {
            if (this.lang == 'fa') {
                return (/** @type {?} */ (this.JDateAdapter.addCalendarDays((/** @type {?} */ (date)), days)));
            }
            return this._createDateWithOverflow(this.getYear(date), this.getMonth(date), this.getDate(date) + days);
        };
        /**
         * @param {?} date
         * @return {?}
         */
        NativeDateAdapter.prototype.getISODateString = /**
         * @param {?} date
         * @return {?}
         */
        function (date) {
            if (this.lang == 'fa') {
                return this.JDateAdapter.getISODateString((/** @type {?} */ (date)));
            }
            return [
                date.getUTCFullYear(),
                this._2digit(date.getUTCMonth() + 1),
                this._2digit(date.getUTCDate())
            ].join('-');
        };
        /**
         * @param {?} obj
         * @return {?}
         */
        NativeDateAdapter.prototype.isDateInstance = /**
         * @param {?} obj
         * @return {?}
         */
        function (obj) {
            return obj instanceof Date;
        };
        /**
         * @param {?} date
         * @return {?}
         */
        NativeDateAdapter.prototype.isValid = /**
         * @param {?} date
         * @return {?}
         */
        function (date) {
            if (date._d) {
                return !isNaN(date._d.getTime());
            }
            return !isNaN(date.getTime());
        };
        /** Creates a date but allows the month and date to overflow. */
        /**
         * Creates a date but allows the month and date to overflow.
         * @private
         * @param {?} year
         * @param {?} month
         * @param {?} date
         * @return {?}
         */
        NativeDateAdapter.prototype._createDateWithOverflow = /**
         * Creates a date but allows the month and date to overflow.
         * @private
         * @param {?} year
         * @param {?} month
         * @param {?} date
         * @return {?}
         */
        function (year, month, date) {
            /** @type {?} */
            var result = new Date(year, month, date);
            // We need to correct for the fact that JS native Date treats years in range [0, 99] as
            // abbreviations for 19xx.
            if (year >= 0 && year < 100) {
                result.setFullYear(this.getYear(result) - 1900);
            }
            return result;
        };
        /**
         * Pads a number to make it two digits.
         * @param n The number to pad.
         * @returns The padded number.
         */
        /**
         * Pads a number to make it two digits.
         * @private
         * @param {?} n The number to pad.
         * @return {?} The padded number.
         */
        NativeDateAdapter.prototype._2digit = /**
         * Pads a number to make it two digits.
         * @private
         * @param {?} n The number to pad.
         * @return {?} The padded number.
         */
        function (n) {
            return ('00' + n).slice(-2);
        };
        /**
         * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while
         * other browsers do not. We remove them to make output consistent and because they interfere with
         * date parsing.
         * @param str The string to strip direction characters from.
         * @returns The stripped string.
         */
        /**
         * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while
         * other browsers do not. We remove them to make output consistent and because they interfere with
         * date parsing.
         * @private
         * @param {?} str The string to strip direction characters from.
         * @return {?} The stripped string.
         */
        NativeDateAdapter.prototype._stripDirectionalityCharacters = /**
         * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while
         * other browsers do not. We remove them to make output consistent and because they interfere with
         * date parsing.
         * @private
         * @param {?} str The string to strip direction characters from.
         * @return {?} The stripped string.
         */
        function (str) {
            return str.replace(/[\u200e\u200f]/g, '');
        };
        NativeDateAdapter.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        NativeDateAdapter.ctorParameters = function () { return [
            { type: undefined, decorators: [{ type: core.Optional }, { type: core.Inject, args: [core.LOCALE_ID,] }] }
        ]; };
        return NativeDateAdapter;
    }(material.DateAdapter));
    if (false) {
        /** @type {?} */
        NativeDateAdapter.prototype.lang;
        /** @type {?} */
        NativeDateAdapter.prototype.langSubject;
        /** @type {?} */
        NativeDateAdapter.prototype.JDateAdapter;
        /**
         * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.
         * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off
         * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`
         * will produce `'8/13/1800'`.
         * @type {?}
         */
        NativeDateAdapter.prototype.useUtcForDisplay;
    }
    var dateFormat = /** @class */ (function () {
        function dateFormat(_dateAdapter) {
            var _this = this;
            this.parse = {
                dateInput: 'l',
            };
            this.display = {
                dateInput: 'jYYYY/jMM/jDD',
                monthYearLabel: 'jYYYY jMMMM',
                dateA11yLabel: 'jYYYY/jMM/jDD',
                monthYearA11yLabel: 'jYYYY jMMMM'
            };
            this._getChanges = new rxjs.Subject();
            this._lastChanges = new rxjs.BehaviorSubject('fa');
            /** @type {?} */
            var dateAdapter = (/** @type {?} */ (_dateAdapter));
            dateAdapter.getLang().subscribe((/**
             * @param {?} v
             * @return {?}
             */
            function (v) {
                if (v == 'fa') {
                    _this.parse = {
                        dateInput: 'l',
                    };
                    _this.display = {
                        dateInput: 'jYYYY/jMM/jDD',
                        monthYearLabel: 'jYYYY jMMMM',
                        dateA11yLabel: 'jYYYY/jMM/jDD',
                        monthYearA11yLabel: 'jYYYY jMMMM'
                    };
                }
                else {
                    _this.parse = {
                        dateInput: null,
                    };
                    _this.display = {
                        dateInput: { year: 'numeric', month: 'numeric', day: 'numeric' },
                        monthYearLabel: { year: 'numeric', month: 'short' },
                        dateA11yLabel: { year: 'numeric', month: 'long', day: 'numeric' },
                        monthYearA11yLabel: { year: 'numeric', month: 'long' },
                    };
                }
                _this._lastChanges.next(v);
                _this._getChanges.next(v);
            }), (/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
            }), (/**
             * @return {?}
             */
            function () {
            }));
        }
        /**
         * @return {?}
         */
        dateFormat.prototype.getChanges = /**
         * @return {?}
         */
        function () {
            return this._getChanges;
        };
        return dateFormat;
    }());
    if (false) {
        /** @type {?} */
        dateFormat.prototype.parse;
        /** @type {?} */
        dateFormat.prototype.display;
        /** @type {?} */
        dateFormat.prototype._getChanges;
        /** @type {?} */
        dateFormat.prototype._lastChanges;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/index.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var MatDatepickerModulePersian = /** @class */ (function () {
        function MatDatepickerModulePersian() {
        }
        MatDatepickerModulePersian.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            material.MatButtonModule,
                            material.MatButtonToggleModule,
                            material.MatDialogModule,
                            material.MatIconModule,
                            overlay.OverlayModule,
                            material.MatOptionModule,
                            material.MatSelectModule,
                            // StyleModule,
                            a11y.A11yModule,
                        ],
                        exports: [
                            MdCalendar,
                            MdCalendarBody,
                            MdDatepicker,
                            material.MatButtonToggleModule,
                            MdDatepickerInput,
                            MdDatepickerToggle,
                            MdMonthView,
                            MdYearView,
                        ],
                        declarations: [
                            MdCalendar,
                            MdCalendarBody,
                            MdLocaleChanger,
                            MdDatepicker,
                            MdDatepickerContent,
                            MdDatepickerInput,
                            MdDatepickerToggle,
                            MdMonthView,
                            MdYearView,
                        ],
                        providers: [
                            MdDatepickerIntl,
                            MD_DATEPICKER_SCROLL_STRATEGY_PROVIDER,
                            { provide: material.DateAdapter, useClass: NativeDateAdapter }, {
                                provide: material.MAT_DATE_FORMATS,
                                useClass: dateFormat,
                                deps: [material.DateAdapter]
                            }
                        ],
                        entryComponents: [
                            MdDatepickerContent,
                        ]
                    },] }
        ];
        return MatDatepickerModulePersian;
    }());

    exports.MD_DATEPICKER_SCROLL_STRATEGY = MD_DATEPICKER_SCROLL_STRATEGY;
    exports.MD_DATEPICKER_SCROLL_STRATEGY_PROVIDER = MD_DATEPICKER_SCROLL_STRATEGY_PROVIDER;
    exports.MD_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY = MD_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY;
    exports.MD_DATEPICKER_VALIDATORS = MD_DATEPICKER_VALIDATORS;
    exports.MD_DATEPICKER_VALUE_ACCESSOR = MD_DATEPICKER_VALUE_ACCESSOR;
    exports.MatDatepickerModulePersian = MatDatepickerModulePersian;
    exports.MdCalendar = MdCalendar;
    exports.MdCalendarBody = MdCalendarBody;
    exports.MdCalendarCell = MdCalendarCell;
    exports.MdDatepicker = MdDatepicker;
    exports.MdDatepickerContent = MdDatepickerContent;
    exports.MdDatepickerInput = MdDatepickerInput;
    exports.MdDatepickerInputEvent = MdDatepickerInputEvent;
    exports.MdDatepickerIntl = MdDatepickerIntl;
    exports.MdDatepickerToggle = MdDatepickerToggle;
    exports.MdMonthView = MdMonthView;
    exports.MdYearView = MdYearView;
    exports.ɵa = MdLocaleChanger;
    exports.ɵb = NativeDateAdapter;
    exports.ɵc = dateFormat;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ngx-persian-datepicker.umd.js.map
